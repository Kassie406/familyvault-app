you want the (+) to stay visible at all times, and act as a toggle for the dropdown (click to open, click again to close), without the header swallowing the click or remounting the trigger.

Here’s a small, controlled pattern that will do exactly that. Drop this in place of your current “+” and menu. It works with any CSS/utility framework and avoids all the “disappearing” behaviors.

Stable “+” toggle (always visible, click to open/close)
import { useEffect, useRef, useState } from "react";
import { Plus } from "lucide-react";

// tiny click-outside helper
function useClickOutside<T extends HTMLElement>(open: boolean, onClose: () => void) {
  const ref = useRef<T | null>(null);
  useEffect(() => {
    if (!open) return;
    const onDocClick = (e: MouseEvent) => {
      if (!ref.current) return;
      if (!ref.current.contains(e.target as Node)) onClose();
    };
    const onKey = (e: KeyboardEvent) => {
      if (e.key === "Escape") onClose();
    };
    document.addEventListener("mousedown", onDocClick);
    document.addEventListener("keydown", onKey);
    return () => {
      document.removeEventListener("mousedown", onDocClick);
      document.removeEventListener("keydown", onKey);
    };
  }, [open, onClose]);
  return ref;
}

export function FamilyIdsQuickAdd({
  onCreate,
}: {
  onCreate?: (kind: "person" | "pet" | "household" | "other") => void;
}) {
  const [open, setOpen] = useState(false);

  // keep the whole control in one positioned wrapper
  const wrapRef = useClickOutside<HTMLDivElement>(open, () => setOpen(false));

  return (
    <div
      ref={wrapRef}
      className="relative inline-flex items-center"
      // IMPORTANT: no parent onClick that toggles visibility
    >
      {/* ALWAYS-MOUNTED TRIGGER */}
      <button
        type="button"
        aria-label="Add to Family IDs"
        aria-expanded={open}
        aria-haspopup="menu"
        onClick={(e) => {
          e.stopPropagation();      // don’t let header consume the click
          setOpen((v) => !v);       // click again closes
        }}
        className="
          h-8 w-8 rounded-full flex items-center justify-center
          bg-[#D4AF37] text-black shadow
          hover:bg-[#caa62f] active:bg-[#b59324]
          focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#D4AF37]
        "
      >
        <Plus className="h-4 w-4" />
      </button>

      {/* CONTROLLED DROPDOWN (never unmount the button) */}
      {open && (
        <div
          role="menu"
          aria-label="Add to Family IDs"
          className="
            absolute left-0 top-10 z-50 w-64 rounded-xl border border-[#252733]
            bg-[#0F0F10] text-white shadow-xl
            p-2
          "
          onClick={(e) => e.stopPropagation()} // clicks in menu don’t bubble
        >
          <div className="px-2 py-1.5 text-sm font-medium text-neutral-300">
            Add to Family IDs
          </div>
          <ul className="mt-1">
            {[
              ["Person", "person"],
              ["Pet", "pet"],
              ["Household member", "household"],
              ["Other", "other"],
            ].map(([label, value]) => (
              <li key={value}>
                <button
                  role="menuitem"
                  className="w-full text-left px-2 py-2 rounded-md hover:bg-white/5"
                  onClick={() => {
                    onCreate?.(value as any);
                    setOpen(false);
                  }}
                >
                  {label}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

Why this fixes the problem

The button never unmounts; only the menu opens/closes (open state).

We stopPropagation on the trigger and menu so header/container clicks don’t hide the button.

We handle click outside and Esc to close politely.

Proper ARIA (aria-expanded, role="menu") for accessibility.

No timeouts, no CSS rules that set display:none on focus/active.

If you’re using shadcn/ui Popover

You can swap the custom dropdown for a controlled <Popover open={open} onOpenChange={setOpen}> and keep the same trigger. The important part is: keep the trigger mounted and visible always, and toggle open—don’t hide the button.