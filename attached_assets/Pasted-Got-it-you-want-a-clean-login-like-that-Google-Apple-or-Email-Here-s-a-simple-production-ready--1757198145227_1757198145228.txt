Got it—you want a clean login like that: Google, Apple, or Email.
Here’s a simple, production-ready setup you can run on Replit and your domain:

Google: OAuth (fast to set up)

Apple: optional (more steps—can plug in later)

Email: 6-digit code to your Gmail (no third-party credits)

Below I give you the UI + a single Express server that supports all three. You can drop it into your current project (it also protects your portal pages).

1) UI (drop in as views/login.html)
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Welcome back • Family Portal</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root { --bg:#f6f8ff; --card:#fff; --text:#0b1220; --muted:#667085; --brand:#2d6cdf;}
    *{box-sizing:border-box} body{margin:0;background:var(--bg);font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto}
    .wrap{min-height:100vh;display:grid;place-items:center;padding:24px}
    .card{width:420px;max-width:92vw;background:var(--card);border-radius:20px;box-shadow:0 10px 30px rgba(16,24,40,.08);padding:28px}
    h1{margin:0 0 18px;font-weight:700;letter-spacing:-.02em}
    .btn{width:100%;display:flex;align-items:center;gap:10px;justify-content:center;padding:14px 16px;border-radius:32px;border:1px solid #e6e9f5;background:#fff;color:var(--text);font-weight:600;cursor:pointer}
    .btn.google svg{height:18px;width:18px}
    .btn.apple svg{height:18px;width:18px}
    .or{display:flex;align-items:center;gap:12px;margin:18px 0;color:var(--muted);font-size:14px}
    .or:before,.or:after{content:"";height:1px;background:#e6e9f5;flex:1}
    input{width:100%;border:1px solid #e6e9f5;border-radius:12px;padding:14px 16px;font-size:16px}
    .cta{margin-top:12px;background:var(--brand);border:0;color:#fff}
    .hint{color:var(--muted);font-size:13px;text-align:center;margin-top:10px}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1>Welcome back.</h1>

      <button class="btn google" id="google">
        <!-- G icon -->
        <svg viewBox="0 0 48 48"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.651,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12 s5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C33.412,6.053,28.94,4,24,4C12.955,4,4,12.955,4,24 s8.955,20,20,20s20-8.955,20-20C44,22.659,43.862,21.355,43.611,20.083z"/></svg>
        Continue with Google
      </button>

      <button class="btn apple" id="apple">
        <!-- Apple icon -->
        <svg viewBox="0 0 24 24" fill="currentColor"><path d="M16.365 1.43c0 1.14-.42 2.2-1.24 3.04-.9.96-2.37 1.7-3.74 1.6-.12-1.1.52-2.3 1.28-3.1.9-.96 2.45-1.65 3.7-1.54.06.2.06.4.06.6zM20.7 17.17c-.4.9-.84 1.74-1.4 2.53-.76 1.1-1.7 2.38-3.02 2.38-1.1 0-1.84-.72-3.1-.72-1.3 0-2.07.72-3.16.72-1.34 0-2.27-1.2-3.03-2.28C5.06 18.2 3.7 14.74 5.2 11.84c.84-1.66 2.35-2.72 4.1-2.75 1.24-.02 2.4.84 3.1.84.78 0 2.17-1.04 3.67-.89.63.03 2.4.26 3.54 2.02-.09.06-2.11 1.23-2.09 3.66.02 2.92 2.54 3.91 2.58 3.95z"/></svg>
        Continue with Apple
      </button>

      <div class="or">OR</div>

      <input id="email" type="email" placeholder="Email address*" />
      <button class="btn cta" id="emailContinue">Continue</button>

      <p class="hint">We’ll email you a 6-digit code.</p>
    </div>
  </div>

  <script>
    document.getElementById('google').onclick = () => location.href = '/auth/google'
    document.getElementById('apple').onclick  = () => location.href = '/auth/apple' // optional; wire later
    document.getElementById('emailContinue').onclick = async () => {
      const email = document.getElementById('email').value.trim()
      if (!email) return alert('Enter your email')
      const r = await fetch('/login/start', {method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({ email })})
      const j = await r.json()
      if (!j.ok) return alert(j.msg || 'Failed')
      sessionStorage.setItem('login.email', email)
      sessionStorage.setItem('login.nonce', j.nonce)
      location.href = '/verify'
    }
  </script>
</body>
</html>


And views/verify.html (from the previous message) still works for the email-code flow.

2) Server (Express) with Google + Email

Use the server.js I gave earlier for email codes, plus add Google OAuth. (Apple is optional—plug later.)

Install more deps
npm i passport express-session passport-google-oauth20

Add to server.js (top imports + session + passport)
import session from 'express-session'
import passport from 'passport'
import { Strategy as GoogleStrategy } from 'passport-google-oauth20'

// ...existing imports above...

app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: { secure: (process.env.APP_DOMAIN || '').startsWith('https://'), sameSite: 'lax' }
}))
app.use(passport.initialize())
app.use(passport.session())

passport.serializeUser((user, done) => done(null, user))
passport.deserializeUser((obj, done) => done(null, obj))

passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  callbackURL: '/auth/google/callback'
}, (accessToken, refreshToken, profile, done) => {
  const email = (profile.emails?.[0]?.value || '').toLowerCase()
  if (ALLOWED.length && !ALLOWED.includes(email)) return done(null, false)
  return done(null, { email, name: profile.displayName })
}))

Google routes
app.get('/auth/google', passport.authenticate('google', { scope: ['email','profile'] }))

app.get('/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/login' }),
  (req, res) => {
    // Issue cookie session also for consistency
    issueSession(res, req.user.email)
    res.redirect('/')
  }
)


Apple: can be added with passport-apple later (needs Apple Developer keys). Let’s get Google + Email live first.

3) Google Cloud setup (5 minutes)

Go to Google Cloud Console → APIs & Services → Credentials

Create OAuth client → Web application

Authorized JavaScript origins:

https://portal.familycirclesecure.com

(Your Replit preview origin if you test there)

Authorized redirect URIs:

https://portal.familycirclesecure.com/auth/google/callback

(Add your replit.dev callback for testing if needed)

Copy Client ID and Client Secret into Replit Secrets:

GOOGLE_CLIENT_ID

GOOGLE_CLIENT_SECRET

Already set from earlier:

APP_DOMAIN, SESSION_SECRET, ALLOWED_EMAILS, SMTP_* (for email codes)

Redeploy → hit /login → try Continue with Google or the Email path.

4) Protect your portal

Keep using the requireAuth middleware from the previous answer. All routes like /, /inbox.html, /photos.html are protected by cookies whether users signed in with Google or Email code.

Logout button anywhere:

<button onclick="fetch('/logout',{method:'POST'}).then(()=>location='/login')">Logout</button>

5) Apple (optional to add later)

When you’re ready, we can wire passport-apple:

Create a Services ID in Apple Developer

Team ID, Key ID, Sign in with Apple private key (P8)

Callback: https://portal.familycirclesecure.com/auth/apple/callback

I’ll drop the Apple strategy once Google is confirmed working.

If you want, tell me: