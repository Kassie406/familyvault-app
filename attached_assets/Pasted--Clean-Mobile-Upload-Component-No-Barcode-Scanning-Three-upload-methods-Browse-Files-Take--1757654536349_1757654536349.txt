// Clean Mobile Upload Component - No Barcode Scanning
// Three upload methods: Browse Files, Take Photo, Mobile Upload

import React, { useState, useRef, useCallback, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

// Main Upload Center Component
export const CleanUploadCenter = ({ 
  familyId = 'camacho_family',
  onDocumentProcessed,
  onNavigateToProfile 
}) => {
  const [uploadState, setUploadState] = useState('ready');
  const [uploadedDocuments, setUploadedDocuments] = useState([]);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [selectedDocument, setSelectedDocument] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [showCameraModal, setShowCameraModal] = useState(false);
  const [showMobileUploadModal, setShowMobileUploadModal] = useState(false);
  const [qrCodeUrl, setQrCodeUrl] = useState('');
  const [mobileUploadLink, setMobileUploadLink] = useState('');
  const [processingProgress, setProcessingProgress] = useState(0);
  const [notification, setNotification] = useState(null);

  const fileInputRef = useRef(null);
  const videoRef = useRef(null);
  const canvasRef = useRef(null);
  const streamRef = useRef(null);

  // Handle Browse Files
  const handleBrowseFiles = () => {
    fileInputRef.current?.click();
  };

  // Handle Take Photo
  const handleTakePhoto = () => {
    setShowCameraModal(true);
    startCamera();
  };

  // Handle Mobile Upload
  const handleMobileUpload = async () => {
    try {
      const uploadSession = await generateUploadSession();
      const baseUrl = window.location.origin;
      const mobileLink = `${baseUrl}/mobile-upload/${uploadSession.sessionId}?family=${familyId}`;
      
      // Generate QR code for mobile access
      const qrDataUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(mobileLink)}&bgcolor=0F0F0F&color=D4AF37`;
      
      setMobileUploadLink(mobileLink);
      setQrCodeUrl(qrDataUrl);
      setShowMobileUploadModal(true);
      
    } catch (error) {
      console.error('Failed to generate mobile upload link:', error);
      showNotification('Failed to generate mobile upload link', 'error');
    }
  };

  // Generate upload session
  const generateUploadSession = async () => {
    const response = await fetch('/api/mobile-upload/create-session', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        familyId,
        expiresIn: 3600
      })
    });

    if (!response.ok) {
      throw new Error('Failed to create upload session');
    }

    return response.json();
  };

  // Handle file upload (unified for all methods)
  const handleFileUpload = async (files) => {
    if (!files || files.length === 0) return;

    setUploadState('uploading');
    setProcessingProgress(0);

    try {
      const uploadPromises = Array.from(files).map(async (file, index) => {
        const formData = new FormData();
        formData.append('document', file);
        formData.append('familyId', familyId);

        const uploadResponse = await fetch('/api/trustworthy/upload', {
          method: 'POST',
          body: formData
        });

        if (!uploadResponse.ok) {
          throw new Error(`Upload failed for ${file.name}`);
        }

        const uploadResult = await uploadResponse.json();
        setProcessingProgress(((index + 1) / files.length) * 50);
        
        return uploadResult.document;
      });

      const documents = await Promise.all(uploadPromises);
      
      // Open LEFT sidebar with documents
      setUploadedDocuments(prev => [...documents, ...prev]);
      setSidebarOpen(true);
      setUploadState('processing');
      
      // Start AI analysis
      documents.forEach(async (doc, index) => {
        await startAIAnalysis(doc.id);
        setProcessingProgress(50 + ((index + 1) / documents.length) * 50);
      });

      setUploadState('complete');
      
      if (onDocumentProcessed) {
        onDocumentProcessed(documents);
      }

    } catch (error) {
      console.error('Upload failed:', error);
      setUploadState('ready');
      showNotification('Upload failed. Please try again.', 'error');
    }
  };

  // Handle file input change
  const handleFileChange = (event) => {
    const files = event.target.files;
    if (files && files.length > 0) {
      handleFileUpload(files);
    }
  };

  // Camera functions
  const startCamera = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: 'environment' } 
      });
      streamRef.current = stream;
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
    } catch (error) {
      console.error('Failed to start camera:', error);
      showNotification('Failed to access camera', 'error');
    }
  };

  const stopCamera = () => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
  };

  const capturePhoto = () => {
    if (videoRef.current && canvasRef.current) {
      const canvas = canvasRef.current;
      const video = videoRef.current;
      const context = canvas.getContext('2d');
      
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      context.drawImage(video, 0, 0);
      
      canvas.toBlob(async (blob) => {
        const file = new File([blob], `photo-${Date.now()}.jpg`, { type: 'image/jpeg' });
        await handleFileUpload([file]);
        setShowCameraModal(false);
        stopCamera();
      }, 'image/jpeg', 0.8);
    }
  };

  // AI Analysis
  const startAIAnalysis = async (documentId) => {
    try {
      const response = await fetch('/api/trustworthy/analyze', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ documentId })
      });

      if (!response.ok) {
        throw new Error('Analysis failed');
      }

      const result = await response.json();
      
      setUploadedDocuments(prev => 
        prev.map(doc => 
          doc.id === documentId 
            ? { ...doc, ...result.analysis, status: 'analyzed' }
            : doc
        )
      );

    } catch (error) {
      console.error('AI analysis failed:', error);
    }
  };

  // Notification system
  const showNotification = (message, type = 'info') => {
    setNotification({ message, type });
    setTimeout(() => setNotification(null), 5000);
  };

  // Copy link to clipboard
  const copyLinkToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(mobileUploadLink);
      showNotification('Link copied to clipboard!', 'success');
    } catch (error) {
      showNotification('Failed to copy link', 'error');
    }
  };

  // Share link
  const shareMobileLink = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Upload Documents to Family Vault',
          text: 'Use this link to upload documents to our family vault',
          url: mobileUploadLink
        });
      } catch (error) {
        console.error('Failed to share link:', error);
      }
    } else {
      copyLinkToClipboard();
    }
  };

  return (
    <div className="clean-upload-system">
      {/* Family Header */}
      <FamilyHeader familyId={familyId} />
      
      {/* Main Upload Area */}
      <CleanUploadArea
        uploadState={uploadState}
        processingProgress={processingProgress}
        onBrowseFiles={handleBrowseFiles}
        onTakePhoto={handleTakePhoto}
        onMobileUpload={handleMobileUpload}
        onFileUpload={handleFileUpload}
      />

      {/* Camera Modal */}
      <CameraModal
        isOpen={showCameraModal}
        videoRef={videoRef}
        canvasRef={canvasRef}
        onCapture={capturePhoto}
        onClose={() => {
          setShowCameraModal(false);
          stopCamera();
        }}
      />

      {/* Mobile Upload Modal */}
      <MobileUploadModal
        isOpen={showMobileUploadModal}
        qrCodeUrl={qrCodeUrl}
        mobileLink={mobileUploadLink}
        onClose={() => setShowMobileUploadModal(false)}
        onCopyLink={copyLinkToClipboard}
        onShareLink={shareMobileLink}
      />

      {/* Left Sidebar */}
      <LeftSidebar
        isOpen={sidebarOpen}
        documents={uploadedDocuments}
        onClose={() => setSidebarOpen(false)}
        onDocumentClick={setSelectedDocument}
        onDetailsClick={(doc) => {
          setSelectedDocument(doc);
          setShowDetailsModal(true);
        }}
      />

      {/* Details Modal */}
      <DetailsModal
        isOpen={showDetailsModal}
        document={selectedDocument}
        onClose={() => setShowDetailsModal(false)}
        onNavigateToProfile={onNavigateToProfile}
      />

      {/* Notification */}
      <NotificationToast notification={notification} />

      {/* Hidden File Input */}
      <input
        ref={fileInputRef}
        type="file"
        onChange={handleFileChange}
        accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.heic"
        multiple
        style={{ display: 'none' }}
      />
    </div>
  );
};

// Family Header Component
const FamilyHeader = ({ familyId }) => (
  <motion.div 
    className="family-header"
    initial={{ opacity: 0, y: -20 }}
    animate={{ opacity: 1, y: 0 }}
  >
    <div className="family-info">
      <h1 className="family-name">{familyId.replace('_', ' ')} Family</h1>
      <p className="family-subtitle">Document Upload Center</p>
    </div>
    <div className="family-stats">
      <div className="stat-item">
        <span className="stat-value">🔒</span>
        <span className="stat-label">Secure</span>
      </div>
      <div className="stat-item">
        <span className="stat-value">🤖</span>
        <span className="stat-label">AI Powered</span>
      </div>
    </div>
  </motion.div>
);

// Clean Upload Area with three methods
const CleanUploadArea = ({ 
  uploadState, 
  processingProgress, 
  onBrowseFiles, 
  onTakePhoto, 
  onMobileUpload,
  onFileUpload 
}) => {
  const [isDragActive, setIsDragActive] = useState(false);

  const handleDragEnter = (e) => {
    e.preventDefault();
    setIsDragActive(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    if (!e.currentTarget.contains(e.relatedTarget)) {
      setIsDragActive(false);
    }
  };

  const handleDragOver = (e) => {
    e.preventDefault();
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragActive(false);
    const files = e.dataTransfer.files;
    if (files && files.length > 0) {
      onFileUpload(files);
    }
  };

  return (
    <motion.div
      className={`clean-upload-area ${isDragActive ? 'drag-active' : ''} ${uploadState}`}
      onDrop={handleDrop}
      onDragOver={handleDragOver}
      onDragEnter={handleDragEnter}
      onDragLeave={handleDragLeave}
      whileHover={uploadState === 'ready' ? { scale: 1.01 } : {}}
    >
      <div className="upload-content">
        {uploadState === 'ready' && (
          <ReadyState 
            onBrowseFiles={onBrowseFiles}
            onTakePhoto={onTakePhoto}
            onMobileUpload={onMobileUpload}
            isDragActive={isDragActive}
          />
        )}
        
        {uploadState === 'uploading' && (
          <UploadingState progress={processingProgress} />
        )}
        
        {uploadState === 'processing' && (
          <ProcessingState progress={processingProgress} />
        )}
        
        {uploadState === 'complete' && (
          <CompleteState />
        )}
      </div>
    </motion.div>
  );
};

// Ready State Component with three upload methods
const ReadyState = ({ onBrowseFiles, onTakePhoto, onMobileUpload, isDragActive }) => (
  <motion.div
    className="upload-ready"
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
  >
    <div className="upload-icon">
      {isDragActive ? (
        <motion.div
          initial={{ scale: 0.8 }}
          animate={{ scale: 1.2 }}
          className="drag-icon"
        >
          📥
        </motion.div>
      ) : (
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} 
                d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
      )}
    </div>
    
    <h3>Upload Family Documents</h3>
    <p>Add documents and photos to your family vault</p>
    <p className="ai-text">AI will automatically extract key information</p>
    
    {/* Three Upload Methods */}
    <div className="upload-button-group">
      <motion.button
        className="upload-method-button browse-files"
        onClick={onBrowseFiles}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <span className="button-icon">📁</span>
        <span className="button-text">Browse Files</span>
      </motion.button>
      
      <motion.button
        className="upload-method-button take-photo"
        onClick={onTakePhoto}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <span className="button-icon">📷</span>
        <span className="button-text">Take Photo</span>
      </motion.button>
      
      <motion.button
        className="upload-method-button mobile-upload"
        onClick={onMobileUpload}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
      >
        <span className="button-icon">📱</span>
        <span className="button-text">Mobile Upload</span>
      </motion.button>
    </div>
    
    <span className="or-text">or drag & drop files here</span>
    
    <div className="file-types">
      <span className="file-type">PDF</span>
      <span className="file-type">JPG</span>
      <span className="file-type">PNG</span>
      <span className="file-type">HEIC</span>
      <span className="file-type">DOC</span>
      <span className="file-type">TXT</span>
    </div>
  </motion.div>
);

// Camera Modal Component
const CameraModal = ({ isOpen, videoRef, canvasRef, onCapture, onClose }) => (
  <AnimatePresence>
    {isOpen && (
      <>
        <motion.div
          className="camera-backdrop"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
        />
        
        <motion.div
          className="camera-modal"
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.9 }}
        >
          <div className="camera-header">
            <h3>📷 Take Photo</h3>
            <button className="close-button" onClick={onClose}>×</button>
          </div>
          
          <div className="camera-content">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              className="camera-video"
            />
            <canvas
              ref={canvasRef}
              style={{ display: 'none' }}
            />
          </div>
          
          <div className="camera-controls">
            <button className="capture-button" onClick={onCapture}>
              📸 Capture Photo
            </button>
          </div>
        </motion.div>
      </>
    )}
  </AnimatePresence>
);

// Mobile Upload Modal Component
const MobileUploadModal = ({ 
  isOpen, 
  qrCodeUrl, 
  mobileLink, 
  onClose, 
  onCopyLink, 
  onShareLink 
}) => {
  const [timeRemaining, setTimeRemaining] = useState(3600);

  useEffect(() => {
    if (!isOpen) return;

    const timer = setInterval(() => {
      setTimeRemaining(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          onClose();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isOpen, onClose]);

  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          <motion.div
            className="mobile-upload-backdrop"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
          />
          
          <motion.div
            className="mobile-upload-modal"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
          >
            <div className="mobile-upload-header">
              <h3>📱 Mobile Upload</h3>
              <button className="close-button" onClick={onClose}>×</button>
            </div>
            
            <div className="mobile-upload-content">
              <div className="qr-code-section">
                <div className="qr-code-container">
                  {qrCodeUrl && (
                    <img 
                      src={qrCodeUrl} 
                      alt="QR Code for Mobile Upload" 
                      className="qr-code-image"
                    />
                  )}
                </div>
                
                <div className="qr-instructions">
                  <h4>Scan with your phone camera</h4>
                  <p>Point your phone's camera at the QR code to open the upload page</p>
                </div>
              </div>
              
              <div className="link-section">
                <div className="link-container">
                  <input 
                    type="text" 
                    value={mobileLink} 
                    readOnly 
                    className="mobile-link-input"
                  />
                  <button 
                    className="copy-link-button"
                    onClick={onCopyLink}
                  >
                    📋 Copy
                  </button>
                </div>
                
                <div className="share-options">
                  <button 
                    className="share-button"
                    onClick={onShareLink}
                  >
                    📤 Share Link
                  </button>
                </div>
              </div>
              
              <div className="session-info">
                <div className="timer-section">
                  <span className="timer-label">Link expires in:</span>
                  <span className="timer-value">{formatTime(timeRemaining)}</span>
                </div>
                
                <div className="security-note">
                  <span className="security-icon">🔒</span>
                  <span>Secure upload session</span>
                </div>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};

// Left Sidebar Component
const LeftSidebar = ({ isOpen, documents, onClose, onDocumentClick, onDetailsClick }) => (
  <AnimatePresence>
    {isOpen && (
      <motion.div
        className="left-sidebar"
        initial={{ x: -300 }}
        animate={{ x: 0 }}
        exit={{ x: -300 }}
      >
        <div className="sidebar-header">
          <h3>Recent Uploads</h3>
          <button onClick={onClose}>×</button>
        </div>
        
        <div className="sidebar-content">
          {documents.map(doc => (
            <div key={doc.id} className="document-item" onClick={() => onDocumentClick(doc)}>
              <div className="document-info">
                <span className="document-name">{doc.originalName || doc.name}</span>
                <span className="document-status">{doc.status}</span>
              </div>
              <button onClick={(e) => {
                e.stopPropagation();
                onDetailsClick(doc);
              }}>
                ⚡
              </button>
            </div>
          ))}
        </div>
      </motion.div>
    )}
  </AnimatePresence>
);

// Details Modal Component
const DetailsModal = ({ isOpen, document, onClose, onNavigateToProfile }) => (
  <AnimatePresence>
    {isOpen && document && (
      <motion.div
        className="details-modal"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
      >
        <div className="modal-content">
          <h3>Document Details</h3>
          <p>{document.originalName || document.name}</p>
          <button onClick={onClose}>Close</button>
          <button onClick={() => onNavigateToProfile(document)}>
            View in Profile
          </button>
        </div>
      </motion.div>
    )}
  </AnimatePresence>
);

// Notification Toast Component
const NotificationToast = ({ notification }) => (
  <AnimatePresence>
    {notification && (
      <motion.div
        className={`notification-toast ${notification.type}`}
        initial={{ opacity: 0, y: -50 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -50 }}
      >
        {notification.message}
      </motion.div>
    )}
  </AnimatePresence>
);

// Progress State Components
const UploadingState = ({ progress }) => (
  <motion.div className="uploading-state">
    <div className="upload-spinner">⏳</div>
    <h3>Uploading Files...</h3>
    <div className="progress-bar">
      <div className="progress-fill" style={{ width: `${progress}%` }} />
    </div>
    <p>{Math.round(progress)}% complete</p>
  </motion.div>
);

const ProcessingState = ({ progress }) => (
  <motion.div className="processing-state">
    <div className="processing-spinner">🤖</div>
    <h3>AI Analysis in Progress...</h3>
    <div className="progress-bar">
      <div className="progress-fill" style={{ width: `${progress}%` }} />
    </div>
    <p>Extracting key information...</p>
  </motion.div>
);

const CompleteState = () => (
  <motion.div className="complete-state">
    <div className="success-icon">✅</div>
    <h3>Upload Complete!</h3>
    <p>Your documents have been processed and are ready for review.</p>
  </motion.div>
);

export default CleanUploadCenter;
