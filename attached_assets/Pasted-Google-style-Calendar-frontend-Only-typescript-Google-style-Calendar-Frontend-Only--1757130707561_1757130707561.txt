Google‑style Calendar (frontend Only)
· typescript
// Google‑style Calendar (Frontend Only)


// ---------- Day View (reuses week grid for single day) ----------
function DayView({ date, events, onSlotCreate, onEventClick, onEventMove }){
  return (
    <WeekView date={date} events={events.filter(e=> sameDay(e.start,date))} onSlotCreate={onSlotCreate} onEventClick={onEventClick} onEventMove={onEventMove} />
  );
}


// ---------- Event Modal ----------
function EventModal({ mode, event, anchorDate, defaultEnd, onClose, onCreate, onUpdate, onDelete }){
  const [title, setTitle] = useState(event?.title||"");
  const [allDay, setAllDay] = useState(!!event?.allDay);
  const [start, setStart] = useState(toLocalIso(event?.start || anchorDate || new Date()));
  const [end, setEnd] = useState(toLocalIso(event?.end || defaultEnd || addMinutes(new Date(start),60)));
  const [location, setLocation] = useState(event?.location||"");
  const [notes, setNotes] = useState(event?.notes||"");
  const [color, setColor] = useState(event?.color || colors[0]);


  const save = ()=>{
    const s = new Date(start); const e = new Date(end);
    if(mode==='create') onCreate({ title, start:s, end:e, location, notes, color, allDay });
    else onUpdate(event.id, { title, start:s, end:e, location, notes, color, allDay });
    onClose();
  };
  const remove = ()=>{ if(event) { onDelete(event.id); onClose(); } };


  return (
    <div className="fixed inset-0 z-50 bg-black/60 flex items-center justify-center p-4" onClick={onClose}>
      <div className="w-full max-w-md rounded-2xl border border-zinc-700 bg-zinc-900 p-4" onClick={(e)=>e.stopPropagation()}>
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-2 text-yellow-300"><CalIcon className="h-5 w-5"/><span className="font-semibold">{mode==='create'? 'Add event':'Edit event'}</span></div>
          <button onClick={onClose} className="hover:bg-zinc-800 rounded p-1"><X className="h-4 w-4"/></button>
        </div>


        <div className="space-y-3">
          <input className="w-full bg-zinc-800/60 border border-zinc-700 rounded-xl px-3 py-2" placeholder="Add title" value={title} onChange={e=>setTitle(e.target.value)} />


          <div className="grid grid-cols-2 gap-2 text-sm">
            <label className="space-y-1"><span className="text-gray-400 text-xs">Start</span><input type="datetime-local" value={start} onChange={e=>setStart(e.target.value)} className="w-full bg-zinc-800/60 border border-zinc-700 rounded-xl px-2 py-2"/></label>
            <label className="space-y-1"><span className="text-gray-400 text-xs">End</span><input type="datetime-local" value={end} onChange={e=>setEnd(e.target.value)} className="w-full bg-zinc-800/60 border border-zinc-700 rounded-xl px-2 py-2"/></label>
          </div>


          <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={allDay} onChange={e=>setAllDay(e.target.checked)} className="accent-yellow-400"/> All day</label>


          <div className="flex items-center gap-2"><MapPin className="h-4 w-4 text-gray-400"/><input className="flex-1 bg-zinc-800/60 border border-zinc-700 rounded-xl px-3 py-2 text-sm" placeholder="Add location" value={location} onChange={e=>setLocation(e.target.value)} /></div>
          <div className="flex items-start gap-2"><FileText className="h-4 w-4 text-gray-400 mt-2"/><textarea className="flex-1 bg-zinc-800/60 border border-zinc-700 rounded-xl px-3 py-2 text-sm" rows={3} placeholder="Add description" value={notes} onChange={e=>setNotes(e.target.value)} /></div>


          <div className="flex items-center gap-2 text-sm">
            <span className="text-gray-400">Color</span>
            <div className="flex gap-2">{colors.map(c=> (
              <button key={c} onClick={()=>setColor(c)} className={`h-5 w-5 rounded-full border ${color===c? 'ring-2 ring-yellow-400 border-yellow-300':'border-zinc-600'}`} style={{background:c}}/>
            ))}</div>
          </div>


          <div className="flex items-center justify-between pt-2">
            {mode==='edit' ? (
              <button onClick={remove} className="text-red-400 hover:text-red-300 text-sm">Delete</button>
            ) : <span/>}
            <div className="flex gap-2">
              <button onClick={onClose} className="px-3 py-1 rounded-xl border border-zinc-700 hover:bg-zinc-800">Cancel</button>
              <button onClick={save} className="px-3 py-1 rounded-xl border border-yellow-500/30 text-yellow-300 hover:bg-yellow-500/10">Save</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



Dropped a full Google-style Calendar (frontend-only) component into the canvas. It mirrors Google Calendar’s feel while matching your dark + gold theme:

Views: Month / Week / Day

Toolbar: Today, Prev/Next, title, view switch, Add Event

Sidebar: mini month picker + “My calendars” toggles

Event modal: title, date/time, all-day, location, notes, color

Interactions: click on Month cell to create; drag in Week/Day to create 1-hour events; click event to edit/delete

All state is local (no backend yet)

Use it
import CalendarApp from "@/components/GoogleStyleCalendar"; // the canvas file name
export default function Page() {
  return <CalendarApp />;
}