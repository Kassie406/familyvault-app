let’s drop all U.S. federal holidays into your calendar (with correct “observed” dates) right now. Below is a tiny helper you can paste into your calendar file that:

Generates holidays for any year range (default: the next 5 years),

Handles floating holidays (e.g., “3rd Monday in January”),

Adjusts observed dates when a fixed-date holiday lands on a weekend,

Adds them as all-day events to the Holidays in United States calendar.

1) Add these helpers (anywhere above export default function CalendarApp())
// ---- Holiday helpers ----
const nthWeekdayOfMonth = (year: number, monthIndex: number, weekday: number, n: number) => {
  // monthIndex: 0-11, weekday: 0=Sun..6=Sat, n: 1..4 (or -1 for last)
  const first = new Date(year, monthIndex, 1);
  const firstWeekday = first.getDay();
  let day = 1 + ((7 + weekday - firstWeekday) % 7); // first target weekday in month

  if (n > 0) {
    day += (n - 1) * 7;
  } else if (n === -1) {
    // last weekday of month
    const last = new Date(year, monthIndex + 1, 0); // last day of month
    const lastWeekday = last.getDay();
    day = last.getDate() - ((7 + lastWeekday - weekday) % 7);
  }
  return new Date(year, monthIndex, day);
};

const observedDate = (d: Date) => {
  // If holiday falls on Sat -> observed Friday; if Sun -> observed Monday
  const wd = d.getDay();
  if (wd === 6) return new Date(d.getFullYear(), d.getMonth(), d.getDate() - 1);
  if (wd === 0) return new Date(d.getFullYear(), d.getMonth(), d.getDate() + 1);
  return d;
};

const makeAllDay = (d: Date) => ({
  start: new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0),
  end:   new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59),
});

function genUSHolidaysForYear(year: number) {
  // Federal holidays (official)
  const list: { title: string; date: Date }[] = [];

  // Fixed-date (observed): New Year’s Day, Juneteenth, Independence Day, Veterans Day, Christmas
  list.push({ title: "New Year's Day",      date: observedDate(new Date(year, 0, 1))  });
  list.push({ title: "Juneteenth National Independence Day", date: observedDate(new Date(year, 5, 19)) });
  list.push({ title: "Independence Day",    date: observedDate(new Date(year, 6, 4))  });
  list.push({ title: "Veterans Day",        date: observedDate(new Date(year, 10, 11)) });
  list.push({ title: "Christmas Day",       date: observedDate(new Date(year, 11, 25)) });

  // Floating (weekday rules)
  list.push({ title: "Birthday of Martin Luther King, Jr.", date: nthWeekdayOfMonth(year, 0, 1, 3) }); // Jan, Mon(1), 3rd
  list.push({ title: "Washington's Birthday",               date: nthWeekdayOfMonth(year, 1, 1, 3) }); // Feb, Mon, 3rd
  list.push({ title: "Memorial Day",                        date: nthWeekdayOfMonth(year, 4, 1, -1) }); // May, Mon, last
  list.push({ title: "Labor Day",                           date: nthWeekdayOfMonth(year, 8, 1, 1)  }); // Sep, Mon, 1st
  list.push({ title: "Columbus Day",                        date: nthWeekdayOfMonth(year, 9, 1, 2)  }); // Oct, Mon, 2nd
  list.push({ title: "Thanksgiving Day",                    date: nthWeekdayOfMonth(year, 10, 4, 4) }); // Nov, Thu(4), 4th

  // Convert to your event objects
  return list.map(({ title, date }) => {
    const { start, end } = makeAllDay(date);
    return {
      id: id(),
      cal: "Holidays in United States",
      title,
      start,
      end,
      allDay: true,
      color: "#34d399", // green; change if you prefer
      // no rrule here because observed rules can move off the base date
    };
  });
}

/** Generate and return holidays for a range of years */
function genUSHolidays(yearStart = new Date().getFullYear(), years = 5) {
  const events: any[] = [];
  for (let y = yearStart; y < yearStart + years; y++) {
    events.push(...genUSHolidaysForYear(y));
  }
  return events;
}

2) Add a one-click “Add US Holidays” action

If you like the right shortcuts panel, add a button there; otherwise, put this anywhere (e.g., Toolbar). Inside CalendarApp():

const addUSHolidays = (startYear = new Date().getFullYear(), years = 5) => {
  const holidays = genUSHolidays(startYear, years);
  setEvents(prev => {
    // avoid duplicates by (title + start date) key
    const seen = new Set(prev.map(e => `${e.title}|${startOfDay(e.start).toDateString()}`));
    const fresh = holidays.filter(e => !seen.has(`${e.title}|${startOfDay(e.start).toDateString()}`));
    return [...prev, ...fresh];
  });
};


In your RightShortcuts (or wherever you want a trigger), add:

<button
  onClick={()=> addUSHolidays(new Date().getFullYear(), 5)}
  className="w-full justify-start px-3 py-2 rounded-xl border border-zinc-700 hover:bg-zinc-800 flex items-center gap-2"
>
  <CalIcon className="h-4 w-4" /> Add US Holidays (5 yrs)
</button>


That will instantly populate Holidays in United States in your calendar for the next 5 years, with observed dates correctly adjusted.

3) (Optional) Make recurring ICS-friendly versions

If you also want recurring rules for the floating holidays (useful for ICS export), you can add in addition to the concrete-dated items these minimal recurring entries:

const recurringFederal = [
  { title:"Birthday of Martin Luther King, Jr.", rrule:{ freq:"YEARLY", byMonth:1,  byDay:["MO"], bySetPos:3 } },
  { title:"Washington's Birthday",               rrule:{ freq:"YEARLY", byMonth:2,  byDay:["MO"], bySetPos:3 } },
  { title:"Memorial Day",                        rrule:{ freq:"YEARLY", byMonth:5,  byDay:["MO"], bySetPos:-1 } },
  { title:"Labor Day",                           rrule:{ freq:"YEARLY", byMonth:9,  byDay:["MO"], bySetPos:1 } },
  { title:"Columbus Day",                        rrule:{ freq:"YEARLY", byMonth:10, byDay:["MO"], bySetPos:2 } },
  { title:"Thanksgiving Day",                    rrule:{ freq:"YEARLY", byMonth:11, byDay:["TH"], bySetPos:4 } },
];
// For ICS builder: extend rruleToString to include BYSETPOS when present


But since observed rules (Fri/Mon shift for weekend) can’t be expressed cleanly with a single RRULE, the concrete generator above is the most accurate for what you see on-screen.