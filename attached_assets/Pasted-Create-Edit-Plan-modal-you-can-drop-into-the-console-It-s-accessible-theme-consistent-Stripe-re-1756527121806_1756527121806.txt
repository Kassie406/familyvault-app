Create / Edit Plan modal you can drop into the console. It‚Äôs accessible, theme-consistent, Stripe-ready, and handles ‚ÄúCustom‚Äù/non-billable logic.

üîß Modal: Create / Edit Subscription Plan (CLIENT / PUBLIC)
HTML
<!-- Open modal button (example) -->
<button class="btn primary" id="open-plan-modal">+ New Plan</button>

<!-- MODAL -->
<div class="modal-backdrop" id="plan-modal" hidden>
  <div class="modal" role="dialog" aria-modal="true" aria-labelledby="planTitle">
    <header class="modal-header">
      <h3 id="planTitle">Create Subscription Plan</h3>
      <button class="icon-btn" id="plan-close" aria-label="Close">‚úñ</button>
    </header>

    <form id="plan-form" novalidate>
      <!-- Scope: billing only for PUBLIC -->
      <div class="grid-2">
        <div class="field">
          <label>Audience / Tenant</label>
          <select name="tenant" id="tenant" required>
            <option value="PUBLIC" selected>Client (Public)</option>
            <option value="FAMILY" data-nobilling>Family (no billing)</option>
            <option value="STAFF" data-nobilling>Staff (no billing)</option>
          </select>
          <small class="hint">Billing is available only for Client/Public plans.</small>
        </div>

        <div class="field">
          <label>Status</label>
          <select name="status" id="status">
            <option value="active" selected>Active</option>
            <option value="archived">Archived</option>
          </select>
        </div>
      </div>

      <div class="grid-2">
        <div class="field">
          <label>Plan Name</label>
          <input name="name" id="name" required placeholder="Gold" />
        </div>
        <div class="field">
          <label>Slug (internal)</label>
          <input name="slug" id="slug" placeholder="gold" />
          <small class="hint">No spaces; used in URLs & internal references.</small>
        </div>
      </div>

      <div class="field">
        <label>Short Description</label>
        <input name="description" id="description" placeholder="Total peace of mind for your family & business" />
      </div>

      <!-- BILLING BLOCK (auto-disabled if non-billable tenant or custom pricing) -->
      <fieldset id="billing-block">
        <legend>Billing</legend>

        <div class="grid-3">
          <div class="field">
            <label>Pricing Type</label>
            <select name="pricing_type" id="pricing_type">
              <option value="fixed" selected>Fixed Price</option>
              <option value="custom">Custom / By Quote</option>
              <option value="free">Free</option>
            </select>
          </div>

          <div class="field billable-only">
            <label>Price (USD)</label>
            <input name="amount" id="amount" type="number" step="0.01" min="0" placeholder="20.00" />
          </div>

          <div class="field billable-only">
            <label>Interval</label>
            <select name="interval" id="interval">
              <option value="month" selected>Monthly</option>
              <option value="year">Yearly</option>
            </select>
          </div>
        </div>

        <div class="grid-3 billable-only">
          <div class="field">
            <label>Collect Annually?</label>
            <select name="billing_scheme" id="billing_scheme">
              <option value="pay_per_interval" selected>Charge each interval</option>
              <option value="annual_prepay">Annual prepay (per-month price shown)</option>
            </select>
          </div>

            <div class="field">
              <label>Trial Days</label>
              <input name="trial_days" id="trial_days" type="number" min="0" placeholder="0" />
            </div>

          <div class="field">
            <label>Tax Behavior</label>
            <select name="tax_behavior" id="tax_behavior">
              <option value="unspecified" selected>Unspecified</option>
              <option value="inclusive">Tax inclusive</option>
              <option value="exclusive">Tax exclusive</option>
            </select>
          </div>
        </div>

        <div class="grid-2 billable-only">
          <div class="field">
            <label>Stripe Product ID</label>
            <input name="stripe_product_id" id="stripe_product_id" placeholder="prod_..." />
          </div>
          <div class="field">
            <label>Stripe Price ID</label>
            <input name="stripe_price_id" id="stripe_price_id" placeholder="price_..." />
            <small class="hint">Leave blank to auto-create in Stripe on Save.</small>
          </div>
        </div>
      </fieldset>

      <!-- FEATURES -->
      <fieldset>
        <legend>Features</legend>
        <div id="features">
          <div class="feature-row">
            <input name="features[]" placeholder="Advanced security & privacy" />
            <button type="button" class="icon-btn remove-feature" aria-label="Remove">üóëÔ∏è</button>
          </div>
        </div>
        <button type="button" class="btn ghost" id="add-feature">+ Add Feature</button>
      </fieldset>

      <!-- VISIBILITY -->
      <div class="grid-3">
        <div class="field">
          <label>Visibility</label>
          <select name="visibility" id="visibility">
            <option value="public" selected>Public (marketing page + checkout)</option>
            <option value="internal">Internal only (hidden)</option>
            <option value="invite">Invite-only</option>
          </select>
        </div>
        <div class="field">
          <label>Sort Order</label>
          <input name="sort" id="sort" type="number" min="0" value="2" />
        </div>
        <div class="field">
          <label>Badge (optional)</label>
          <input name="badge" id="badge" placeholder="Popular" />
        </div>
      </div>

      <footer class="modal-footer">
        <button type="button" class="btn ghost" id="cancel-plan">Cancel</button>
        <button type="submit" class="btn primary">Save Plan</button>
      </footer>
    </form>
  </div>
</div>

CSS
.modal-backdrop{position:fixed;inset:0;background:rgba(3,7,18,.55);display:grid;place-items:center;z-index:50}
.modal{width:min(860px,92vw);background:#fff;border:1px solid #E5EAF2;border-radius:16px;
  box-shadow:0 16px 48px rgba(16,24,40,.16)}
.modal-header,.modal-footer{display:flex;align-items:center;justify-content:space-between;padding:16px 20px;border-bottom:1px solid #EEF1F5}
.modal-footer{border-top:1px solid #EEF1F5;border-bottom:0}
.modal form{padding:16px 20px 0}
.grid-2{display:grid;grid-template-columns:1fr 1fr;gap:12px}
.grid-3{display:grid;grid-template-columns:1fr 1fr 1fr;gap:12px}
.field{display:flex;flex-direction:column;gap:6px}
.field input,.field select{border:1px solid #D7DEE8;border-radius:10px;padding:10px 12px}
.field input:focus,.field select:focus{outline:2px solid #1F6FEB33;border-color:#1F6FEB}
legend{font-weight:700;margin-bottom:8px}
.hint{color:#6B7280}
.icon-btn{border:0;background:transparent;font-size:14px;cursor:pointer;color:#667085}
.icon-btn:hover{color:#1F6FEB}
.btn{border-radius:10px;padding:10px 14px;border:1px solid transparent;cursor:pointer}
.btn.primary{background:#1F6FEB;color:#fff}
.btn.primary:hover{background:#195BD2}
.btn.ghost{background:#fff;border-color:#CBD2E0;color:#344054}
.btn.ghost:hover{background:#F6F8FB}
.feature-row{display:flex;gap:8px;align-items:center;margin-bottom:8px}
.feature-row input{flex:1}
[hidden]{display:none !important}
@media (max-width:820px){.grid-2,.grid-3{grid-template-columns:1fr}}

JS (open/close, validation, billing logic)
<script>
const modal = document.getElementById('plan-modal');
const openBtn = document.getElementById('open-plan-modal');
const closeBtns = [document.getElementById('plan-close'), document.getElementById('cancel-plan')];
const form = document.getElementById('plan-form');

function openModal() {
  modal.hidden = false;
  document.body.style.overflow = 'hidden';
  document.getElementById('name').focus();
}
function closeModal() {
  modal.hidden = true;
  document.body.style.overflow = '';
}

openBtn?.addEventListener('click', openModal);
closeBtns.forEach(b => b?.addEventListener('click', closeModal));
modal.addEventListener('click', e => { if (e.target === modal) closeModal(); });
document.addEventListener('keydown', e => { if (!modal.hidden && e.key === 'Escape') closeModal(); });

/* Add/remove features */
document.getElementById('add-feature').addEventListener('click', () => {
  const row = document.createElement('div');
  row.className = 'feature-row';
  row.innerHTML = `<input name="features[]" placeholder="New feature" />
                   <button type="button" class="icon-btn remove-feature" aria-label="Remove">üóëÔ∏è</button>`;
  document.getElementById('features').appendChild(row);
});
document.getElementById('features').addEventListener('click', (e)=>{
  if(e.target.closest('.remove-feature')){
    e.target.closest('.feature-row').remove();
  }
});

/* Billing logic: disable billable fields when tenant non-billable or custom/free */
const tenant = document.getElementById('tenant');
const pricingType = document.getElementById('pricing_type');
const billableBlock = document.getElementById('billing-block');
const billableOnly = () => billableBlock.querySelectorAll('.billable-only input, .billable-only select');

function updateBillingState(){
  const nobillingTenant = tenant.selectedOptions[0]?.dataset.nobilling !== undefined;
  const pt = pricingType.value;
  const billable = !nobillingTenant && pt === 'fixed';

  billableOnly().forEach(el => {
    el.disabled = !billable;
    el.closest('.field').style.opacity = billable ? 1 : 0.5;
  });

  // show/hide Stripe IDs when fixed price
  document.getElementById('stripe_product_id').closest('.field').hidden = !billable;
  document.getElementById('stripe_price_id').closest('.field').hidden = !billable;
}
tenant.addEventListener('change', updateBillingState);
pricingType.addEventListener('change', updateBillingState);
updateBillingState();

/* Slug autofill */
document.getElementById('name').addEventListener('input', (e)=>{
  const v = e.target.value.trim().toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');
  const slug = document.getElementById('slug');
  if(!slug.value) slug.value = v;
});

/* Submit ‚Üí build payload (ready for your API) */
form.addEventListener('submit', async (e)=>{
  e.preventDefault();

  // simple validation
  const tenantVal = tenant.value;
  const name = form.name.value.trim();
  if(!name){ alert('Plan name is required.'); return; }

  const payload = {
    tenant: tenantVal,                           // PUBLIC | FAMILY | STAFF
    status: form.status.value,                   // active | archived
    name,
    slug: form.slug.value || null,
    description: form.description.value || null,
    pricing: {
      type: form.pricing_type.value,             // fixed | custom | free
      amount: form.amount.value ? Number(form.amount.value) : null,
      interval: form.interval.value || null,     // month | year
      billing_scheme: form.billing_scheme.value, // pay_per_interval | annual_prepay
      trial_days: form.trial_days.value ? Number(form.trial_days.value) : 0,
      tax_behavior: form.tax_behavior.value
    },
    stripe: {
      product_id: form.stripe_product_id.value || null,
      price_id: form.stripe_price_id.value || null
    },
    features: [...form.querySelectorAll('input[name="features[]"]')]
                .map(i=>i.value.trim()).filter(Boolean),
    visibility: form.visibility.value,           // public | internal | invite
    sort: Number(form.sort.value || 0),
    badge: form.badge.value || null
  };

  // Required Stripe fields for billable fixed price
  const needsStripe = (tenantVal === 'PUBLIC' && payload.pricing.type === 'fixed');
  if (needsStripe && (!payload.pricing.amount || !payload.pricing.interval)) {
    alert('Amount and interval are required for a fixed-price client plan.');
    return;
  }

  // POST to your API (example)
  // await fetch('/api/admin/plans', {method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload)});
  console.log('Plan payload ‚Üí', payload);
  closeModal(); // on success
});
</script>

API Contract (example)

POST /api/admin/plans

{
  "tenant": "PUBLIC",
  "status": "active",
  "name": "Gold",
  "slug": "gold",
  "description": "Total peace of mind for your family & business",
  "pricing": {
    "type": "fixed",
    "amount": 20.00,
    "interval": "month",
    "billing_scheme": "annual_prepay",
    "trial_days": 0,
    "tax_behavior": "unspecified"
  },
  "stripe": {
    "product_id": null,
    "price_id": null
  },
  "features": [
    "Everything in Silver plus:",
    "Business information organization",
    "Reminders for filing & compliance dates"
  ],
  "visibility": "public",
  "sort": 3,
  "badge": "Popular"
}


If stripe.price_id is missing and pricing.type === fixed and tenant === PUBLIC, your backend should:

Create/ensure Product in Stripe,

Create Price (recurring),

Save product_id/price_id back to your DB.

Lawyer-style notes (clean governance)

PUBLIC (clients): display renewal terms, cancellation, proration, and tax notices at checkout + in Terms.

FAMILY/STAFF: no billing‚Äîaccess is role-based. Keep a separate internal policy + consent for monitoring/AUP.

Audit: log plan create/edit/archive with admin ID, timestamp, and diff (your tamper-evident audit module).