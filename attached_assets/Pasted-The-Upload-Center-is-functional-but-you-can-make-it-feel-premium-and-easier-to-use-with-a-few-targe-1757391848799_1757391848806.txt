The Upload Center is functional, but you can make it feel premium and easier to use with a few targeted upgrades (no clutter). Here’s a tight plan plus drop-in UI you can paste.

Quick wins (keep your dark + gold look)

Tabbed header + status strip
One “Upload Center” card with Tabs: Documents | Photos. Add a tiny status row: “Secure S3 • Virus-scanned • Max 25MB” + storage used.

Rich dropzone
Large dashed area with icon, microcopy, and a gold hover/drag glow. Show filetype chips (PDF, DOCX, PNG, …).

Instant previews & progress
Thumbnails (images) or file icons (docs), name, size, per-file progress bar, success/error pill.

Action bar
Primary: Upload (disabled until files ready). Secondary: Mobile Upload, Clear.

History drawer (optional)
“Recent uploads” collapsible list (last 5) on the right side.

Micro-copy
Short and confidence-building: “Securely stored. Virus-scanned on upload.”

Accessibility
Real labels, aria-live="polite" for progress, tabindex and keyboard trigger on dropzone.

Drop-in component (React + Tailwind + shadcn/ui)

Uses only shadcn/ui primitives you likely already have. If you want drag-and-drop, add react-dropzone later; this version handles both click-to-select and (optionally) drop.

// components/upload/UploadCenter.tsx
"use client";

import { useRef, useState } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { CheckCircle2, AlertCircle, UploadCloud, FileText, Image as ImageIcon, ShieldCheck } from "lucide-react";

type FileRow = {
  id: string;
  file: File;
  previewUrl?: string;
  progress: number; // 0..100
  status: "idle" | "uploading" | "done" | "error";
  errorMsg?: string;
};

export default function UploadCenter() {
  const [tab, setTab] = useState<"docs" | "photos">("docs");
  const [rows, setRows] = useState<FileRow[]>([]);
  const inputRef = useRef<HTMLInputElement>(null);

  const accept = tab === "docs"
    ? { "application/pdf": [".pdf"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": [".docx"], "text/plain": [".txt"], "application/msword": [".doc"] }
    : { "image/*": [".jpg", ".jpeg", ".png", ".gif", ".webp"] };

  function onPickFiles(e: React.ChangeEvent<HTMLInputElement>) {
    const files = Array.from(e.target.files ?? []);
    const mapped = files.map((f) => ({
      id: crypto.randomUUID(),
      file: f,
      previewUrl: f.type.startsWith("image/") ? URL.createObjectURL(f) : undefined,
      progress: 0,
      status: "idle" as const,
    }));
    setRows((r) => [...mapped, ...r]);
  }

  async function fakeUpload(row: FileRow) {
    // demo progress; replace with real upload
    setRows((r) => r.map((x) => (x.id === row.id ? { ...x, status: "uploading" } : x)));
    for (let p = 10; p <= 100; p += 10) {
      await new Promise((res) => setTimeout(res, 120));
      setRows((r) => r.map((x) => (x.id === row.id ? { ...x, progress: p } : x)));
    }
    setRows((r) => r.map((x) => (x.id === row.id ? { ...x, status: "done" } : x)));
  }

  async function uploadAll() {
    for (const row of rows.filter((r) => r.status === "idle")) {
      // call your real upload here; keep the per-file loop
      await fakeUpload(row);
    }
  }

  function clearAll() {
    rows.forEach((r) => r.previewUrl && URL.revokeObjectURL(r.previewUrl));
    setRows([]);
  }

  const hasPending = rows.some((r) => r.status === "idle");
  const uploading = rows.some((r) => r.status === "uploading");

  return (
    <Card className="bg-zinc-950/70 border-zinc-800">
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-zinc-100">Upload Center</CardTitle>
            <CardDescription className="text-zinc-400">
              Secure S3 <span className="mx-1">•</span> Virus-scanned <span className="mx-1">•</span> Max 25MB each
            </CardDescription>
          </div>
          <div className="hidden md:flex items-center gap-2 text-xs text-zinc-400">
            <ShieldCheck className="h-4 w-4 text-[#c5a000]" />
            Encrypted in transit
          </div>
        </div>
      </CardHeader>

      <CardContent className="pt-0">
        <Tabs value={tab} onValueChange={(v) => setTab(v as any)} className="w-full">
          <TabsList className="bg-zinc-900">
            <TabsTrigger value="docs">Documents</TabsTrigger>
            <TabsTrigger value="photos">Photos</TabsTrigger>
          </TabsList>

          <TabsContent value="docs" className="mt-4">
            <DropArea onPick={() => inputRef.current?.click()} tab="docs" />
          </TabsContent>
          <TabsContent value="photos" className="mt-4">
            <DropArea onPick={() => inputRef.current?.click()} tab="photos" />
          </TabsContent>
        </Tabs>

        {/* Hidden file input */}
        <input
          ref={inputRef}
          type="file"
          multiple
          className="hidden"
          accept={Object.values(accept).flat().join(",")}
          onChange={onPickFiles}
        />

        {/* Selected files list */}
        {!!rows.length && (
          <ul className="mt-4 space-y-2">
            {rows.map((r) => (
              <li key={r.id} className="rounded-xl border border-zinc-800 bg-zinc-900/60 p-3">
                <div className="flex items-center gap-3">
                  <div className="h-10 w-10 rounded-lg bg-zinc-800 overflow-hidden flex items-center justify-center">
                    {r.previewUrl ? (
                      // eslint-disable-next-line @next/next/no-img-element
                      <img src={r.previewUrl} alt={r.file.name} className="h-full w-full object-cover" />
                    ) : tab === "docs" ? (
                      <FileText className="h-5 w-5 text-zinc-300" />
                    ) : (
                      <ImageIcon className="h-5 w-5 text-zinc-300" />
                    )}
                  </div>

                  <div className="min-w-0 flex-1">
                    <div className="truncate text-sm text-zinc-200">{r.file.name}</div>
                    <div className="text-xs text-zinc-500">{(r.file.size / 1024 / 1024).toFixed(2)} MB</div>
                  </div>

                  {/* Status pill */}
                  {r.status === "done" && (
                    <span className="text-xs text-emerald-400 flex items-center gap-1">
                      <CheckCircle2 className="h-4 w-4" /> Uploaded
                    </span>
                  )}
                  {r.status === "error" && (
                    <span className="text-xs text-red-400 flex items-center gap-1">
                      <AlertCircle className="h-4 w-4" /> {r.errorMsg ?? "Failed"}
                    </span>
                  )}
                </div>

                {/* Progress */}
                {r.status !== "done" && (
                  <div className="mt-2">
                    <Progress value={r.progress} className="[&>div]:bg-[#c5a000]" />
                  </div>
                )}
              </li>
            ))}
          </ul>
        )}
      </CardContent>

      <CardFooter className="flex items-center justify-between">
        <div className="text-xs text-zinc-500">
          Tip: You can drag & drop files here. All uploads are virus-scanned.
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            className="rounded-full bg-zinc-900 hover:bg-zinc-800"
            onClick={() => inputRef.current?.click()}
          >
            <UploadCloud className="h-4 w-4 mr-2" />
            Select Files
          </Button>
          <Button
            onClick={uploadAll}
            disabled={!hasPending || uploading}
            className="rounded-full bg-[#c5a000] text-black disabled:opacity-40"
          >
            Upload
          </Button>
          <Button
            variant="outline"
            onClick={clearAll}
            className="rounded-full border-zinc-700 text-zinc-300"
          >
            Clear
          </Button>
        </div>
      </CardFooter>
    </Card>
  );
}

function DropArea({ onPick, tab }: { onPick: () => void; tab: "docs" | "photos" }) {
  return (
    <div
      role="button"
      tabIndex={0}
      onClick={onPick}
      onKeyDown={(e) => (e.key === "Enter" || e.key === " " ? onPick() : null)}
      className="rounded-2xl border-2 border-dashed border-zinc-700 bg-zinc-900/40
                 p-6 text-center hover:border-[#c5a000] hover:shadow-[0_0_0_3px_rgba(197,160,0,0.15)]
                 transition focus:outline-none focus-visible:ring-2 focus-visible:ring-[#c5a000]
                 cursor-pointer"
      aria-label={`Select ${tab === "docs" ? "documents" : "photos"} to upload`}
    >
      <div className="mx-auto mb-2 rounded-xl h-10 w-10 bg-zinc-800 flex items-center justify-center">
        <UploadCloud className="h-5 w-5 text-zinc-300" />
      </div>
      <div className="text-sm text-zinc-300">
        Click to select {tab === "docs" ? "documents" : "photos"} or drag & drop
      </div>
      <div className="text-xs text-zinc-500 mt-1">
        {tab === "docs" ? "PDF, DOC, DOCX, TXT (Max 25MB each)" : "JPG, PNG, GIF, WebP (Max 10MB each)"}
      </div>
    </div>
  );
}

Notes

Replace fakeUpload with your real S3/API call; keep per-file progress updates to animate the bar.

The gold accent is your brand color #c5a000 and is only used for hover glow/progress/primary button.

Everything stacks nicely on mobile; the parent Card can stay full width.

Result

Cleaner single Upload Center with Tabs = less visual weight.

Clear call-to-action and feedback (progress, success, errors).

Premium feel (glow, ring-offset, subtle borders) that matches your dashboard.

If you want me to convert your existing two cards into this unified component with your data functions, drop your current JSX for those sections and I’ll return it wired line-for-line.