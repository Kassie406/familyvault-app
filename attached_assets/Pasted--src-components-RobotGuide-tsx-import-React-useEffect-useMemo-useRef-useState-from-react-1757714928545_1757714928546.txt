// src/components/RobotGuide.tsx
import React, { useEffect, useMemo, useRef, useState } from "react";
import { createPortal } from "react-dom";
import { motion, useMotionValue, animate } from "framer-motion";

type Step = { selector: string; message: string };
type Props = {
  steps: Step[];
  start?: boolean;
  onFinish?: () => void;
  // initial position if no step active
  initial?: { x: number; y: number };
};

function useCursor() {
  const [p, setP] = useState({ x: window.innerWidth / 2, y: window.innerHeight / 2 });
  useEffect(() => {
    const h = (e: MouseEvent) => setP({ x: e.clientX, y: e.clientY });
    window.addEventListener("mousemove", h);
    return () => window.removeEventListener("mousemove", h);
  }, []);
  return p;
}

const Spotlight: React.FC<{ rect: DOMRect | null }> = ({ rect }) => {
  if (!rect) return null;
  const pad = 8;
  const r = new DOMRect(
    rect.left - pad,
    rect.top - pad,
    rect.width + pad * 2,
    rect.height + pad * 2
  );
  const path = `
    M0,0 H${window.innerWidth} V${window.innerHeight} H0 Z
    M${r.left},${r.top} H${r.right} V${r.bottom} H${r.left} Z
  `;
  return createPortal(
    <svg className="fixed inset-0 pointer-events-none z-[9998]">
      <path d={path} fill="rgba(0,0,0,0.5)" fillRule="evenodd" />
      <rect x={r.left} y={r.top} width={r.width} height={r.height}
        className="stroke-[#D4AF37]" fill="transparent" strokeDasharray="6 8" strokeWidth={2}/>
    </svg>,
    document.body
  );
};

export const RobotGuide: React.FC<Props> = ({ steps, start, onFinish, initial }) => {
  const [i, setI] = useState(start ? 0 : -1);
  const target = useMemo(() => (i >= 0 ? document.querySelector(steps[i].selector) as HTMLElement | null : null), [i, steps]);
  const rect = target?.getBoundingClientRect() ?? null;

  // Robot position (floating widget)
  const x = useMotionValue(initial?.x ?? 120);
  const y = useMotionValue(initial?.y ?? window.innerHeight - 180);
  const { x: cx, y: cy } = useCursor(); // cursor for eye-tracking

  // Fly to target when step changes
  useEffect(() => {
    if (!rect) return;
    const tx = rect.left + rect.width + 24;
    const ty = rect.top + rect.height / 2;
    const controlsX = animate(x, tx, { duration: 0.6, ease: [0.2, 0.8, 0.2, 1] });
    const controlsY = animate(y, ty, { duration: 0.6, ease: [0.2, 0.8, 0.2, 1] });
    return () => { controlsX.stop(); controlsY.stop(); };
  }, [rect]);

  // Idle bobbing when no step
  useEffect(() => {
    if (i >= 0) return;
    const bob = animate(y, (y.get() ?? 0) + 8, { repeat: Infinity, yoyo: true, duration: 1.6, ease: "easeInOut" });
    return () => bob.stop();
  }, [i]);

  // eye tracking
  const eye = (axis: "x" | "y") => {
    const rx = x.get(); const ry = y.get();
    const dx = Math.max(-6, Math.min(6, (cx - rx) / 40));
    const dy = Math.max(-6, Math.min(6, (cy - ry) / 40));
    return axis === "x" ? dx : dy;
  };

  const next = () => {
    if (i + 1 < steps.length) setI(i + 1);
    else { setI(-1); onFinish?.(); }
  };
  const prev = () => setI(Math.max(0, i - 1));
  const open = i >= 0;

  // Tooltip near robot
  const Tip = open ? createPortal(
    <div style={{ left: x.get() + 56, top: y.get() - 8 }}
         className="fixed z-[9999] max-w-sm rounded-2xl bg-zinc-900 text-zinc-100 shadow-xl border border-zinc-800 p-3">
      <div className="text-sm">{steps[i].message}</div>
      <div className="mt-2 flex gap-2 justify-end">
        {i > 0 && <button onClick={prev} className="px-2 py-1 text-xs rounded bg-zinc-800">Back</button>}
        <button onClick={next} className="px-2 py-1 text-xs rounded bg-[#D4AF37] text-black">
          {i + 1 < steps.length ? "Next" : "Finish"}
        </button>
      </div>
    </div>, document.body
  ) : null;

  return (
    <>
      <Spotlight rect={open ? rect : null} />
      {Tip}
      {createPortal(
        <motion.div
          className="fixed z-[9999] cursor-grab active:cursor-grabbing"
          style={{ x, y }}
          drag // allow user to drag the bot
          dragMomentum={false}
          dragElastic={0.12}
        >
          {/* Robot orb (SVG) */}
          <motion.div
            className="w-14 h-14 rounded-full bg-white/95 shadow-[0_0_30px_rgba(212,175,55,.35)] grid place-items-center border border-zinc-300"
            animate={{ scale: open ? 1.05 : 1, boxShadow: open ? "0 0 38px rgba(212,175,55,.55)" : "0 0 24px rgba(212,175,55,.35)" }}
            transition={{ duration: .35 }}
          >
            <div className="relative w-10 h-6 rounded-full bg-black">
              <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 flex gap-2">
                <div className="w-2.5 h-2.5 rounded-full bg-white"
                     style={{ transform: `translate(${eye("x")}px, ${eye("y")}px)` }} />
                <div className="w-2.5 h-2.5 rounded-full bg-white"
                     style={{ transform: `translate(${eye("x")}px, ${eye("y")}px)` }} />
              </div>
            </div>
          </motion.div>
        </motion.div>,
        document.body
      )}
    </>
  );
};
