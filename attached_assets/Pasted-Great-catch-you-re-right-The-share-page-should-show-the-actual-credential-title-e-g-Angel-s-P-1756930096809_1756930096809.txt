Great catch — you’re right.
The share page should show the actual credential title (e.g., “Angel’s Phone Password”) and who shared it, not “Shared by Unknown”.

What’s happening

Your share token resolves to a credential’s secret fields (username, password, url, notes), but the metadata (title/label and owner) isn’t being returned by the /api/share/:token/reveal endpoint.

The share page therefore has no title / owner to display and falls back to generic text.

What to change (quick, safe)

You don’t need a DB migration if your token already stores credentialId. Just load the credential by id at reveal time and return its metadata alongside the secrets.

1) Backend — include metadata in the reveal response
// server/index.ts (reveal handler)
app.post('/api/share/:token/reveal', async (req, res) => {
  try {
    const { token } = req.params;

    // 1) Resolve token
    const share = await db.query.share_links.findFirst({
      where: (t, { eq, gt }) =>
        eq(t.token, token) && gt(t.expires_at, new Date())
    });
    if (!share) return res.status(404).json({ error: 'invalid_or_expired' });

    // Require login only if the flag was set when generated
    if (share.require_login && !req.session?.user) {
      return res.status(401).json({ error: 'auth_required' });
    }

    // 2) Load credential (return metadata + secrets)
    const cred = await db.query.credentials.findFirst({
      where: (c, { eq }) => eq(c.id, share.credential_id),
      columns: {
        id: true,
        title: true,          // e.g. "Angel's Phone Password"
        owner_name: true,     // optional
        username: true,
        password: true,
        url: true,
        notes: true,
      }
    });

    if (!cred) return res.status(404).json({ error: 'missing_credential' });

    // 3) Load who created the share, for “Shared by …”
    const sharedBy = await db.query.users.findFirst({
      where: (u, { eq }) => eq(u.id, share.created_by),
      columns: { display_name: true }
    });

    return res.json({
      // metadata
      title: cred.title,
      ownerName: cred.owner_name ?? null,
      sharedBy: sharedBy?.display_name ?? 'Unknown',
      // secrets
      username: cred.username ?? '',
      password: cred.password ?? '',
      url: cred.url ?? '',
      notes: cred.notes ?? '',
      // optional: policy info for the UI
      requireLogin: !!share.require_login,
      expiresAt: share.expires_at
    });
  } catch (e) {
    console.error('reveal error', e);
    return res.status(500).json({ error: 'server_error' });
  }
});


If your credentials table uses different column names (e.g., name instead of title, owner instead of owner_name), just map accordingly.

2) Frontend — display the title/owner

Update the share page to consume those new fields.

// client/src/pages/share.tsx (or wherever your share page lives)
const { data, error } = useSWR(`/api/share/${token}/reveal`, postFetcher);

if (error?.error === 'auth_required') {
  return <LoginGate />; // when Require login toggled ON
}

if (!data) return <Loading />;

return (
  <Card>
    <CardHeader>
      <CardTitle>{data.title ?? 'Shared Item'}</CardTitle>
      <CardDescription>
        {data.ownerName ? `Owner: ${data.ownerName}` : null}
        {`Shared by ${data.sharedBy ?? 'Unknown'}`}
      </CardDescription>
    </CardHeader>

    <CardContent>
      <Field label="Username" value={data.username} copyable />
      <SecretField label="Password" value={data.password} copyable />
      <Field label="URL" value={data.url} copyable isLink />
      <MultilineField label="Notes" value={data.notes} />
      {/* optional: “visible for 30s” timer you already had */}
    </CardContent>
  </Card>
);

3) (Optional) Also show “Shared by …” on the first screen

On the initial “Reveal Credential” screen, set the subtitle to:

<p className="text-sm text-neutral-400">
  Shared by {data?.sharedBy ?? 'Unknown'}
</p>


If you don’t want a second fetch before clicking “Reveal”, you can keep it generic there and only personalize after reveal.

Small quality touches (nice-to-have)

Brand the page using your theme (“FamilyCircle Secure” + #D4AF37) and replace “Unknown” with the sharer’s display name.

Audit logging: on reveal call, record {token, credentialId, viewerIP, userId?}.

Rate-limit reveal per token to prevent abuse (e.g., 10/min).

Auto-expire view: you already show “Information visible for 30 seconds”. Consider re-masking after the timer or invalidating the token if you want one-time viewing.

Once you add the metadata to the reveal response and render it on the page, your share view will say:

Angel’s Phone Password
Shared by Kassandra (owner Angel)

…exactly matching the card your user clicked.