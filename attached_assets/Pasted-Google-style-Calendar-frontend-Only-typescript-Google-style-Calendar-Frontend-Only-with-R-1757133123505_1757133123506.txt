Google‑style Calendar (frontend Only)
· typescript
// Google‑style Calendar (Frontend Only) — with Recurrence UI + ICS export


  const weekCodes = ['MO','TU','WE','TH','FR','SA','SU'];
  const weekLabels = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun'];


  return (
    <div className="fixed inset-0 z-50 bg-black/60 flex items-center justify-center p-4" onClick={onClose}>
      <div className="w-full max-w-md rounded-2xl border border-zinc-700 bg-zinc-900 p-4" onClick={(e)=>e.stopPropagation()}>
        <div className="flex items-center justify-between mb-2">
          <div className="flex items-center gap-2 text-yellow-300"><CalIcon className="h-5 w-5"/><span className="font-semibold">{mode==='create'? 'Add event':'Edit event'}</span></div>
          <button onClick={onClose} className="hover:bg-zinc-800 rounded p-1"><X className="h-4 w-4"/></button>
        </div>


        <div className="space-y-3">
          <input className="w-full bg-zinc-800/60 border border-zinc-700 rounded-xl px-3 py-2" placeholder="Add title" value={title} onChange={e=>setTitle(e.target.value)} />


          <div className="grid grid-cols-2 gap-2 text-sm">
            <label className="space-y-1"><span className="text-gray-400 text-xs">Start</span><input type="datetime-local" value={start} onChange={e=>setStart(e.target.value)} className="w-full bg-zinc-800/60 border border-zinc-700 rounded-xl px-2 py-2"/></label>
            <label className="space-y-1"><span className="text-gray-400 text-xs">End</span><input type="datetime-local" value={end} onChange={e=>setEnd(e.target.value)} className="w-full bg-zinc-800/60 border border-zinc-700 rounded-xl px-2 py-2"/></label>
          </div>


          <label className="flex items-center gap-2 text-sm"><input type="checkbox" checked={allDay} onChange={e=>setAllDay(e.target.checked)} className="accent-yellow-400"/> All day</label>


          {/* Recurrence */}
          <div className="rounded-xl border border-zinc-700 p-2">
            <div className="text-xs text-gray-400 mb-1">Repeat</div>
            <select value={recur} onChange={e=>setRecur(e.target.value)} className="bg-zinc-800/60 border border-zinc-700 rounded px-2 py-1 text-sm">
              <option value="none">Does not repeat</option>
              <option value="custom">Custom…</option>
            </select>
            {recur==='custom' && (
              <div className="mt-2 space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  <span className="text-gray-400">Every</span>
                  <input type="number" min={1} value={interval} onChange={e=>setInterval(parseInt(e.target.value)||1)} className="w-16 bg-zinc-800/60 border border-zinc-700 rounded px-2 py-1"/>
                  <select value={freq} onChange={e=>setFreq(e.target.value)} className="bg-zinc-800/60 border border-zinc-700 rounded px-2 py-1">
                    <option value="DAILY">day(s)</option>
                    <option value="WEEKLY">week(s)</option>
                    <option value="MONTHLY">month(s)</option>
                  </select>
                </div>
                {freq==='WEEKLY' && (
                  <div className="flex gap-2 flex-wrap">
                    {weekLabels.map((l,i)=> (
                      <button key={l} type="button" onClick={()=>toggleWeekday(weekCodes[i])} className={`px-2 py-1 rounded border text-xs ${byWeekday.includes(weekCodes[i])? 'border-yellow-500/60 text-yellow-300':'border-zinc-700 text-gray-300'}`}>{l}</button>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>


          <div className="flex items-center gap-2"><MapPin className="h-4 w-4 text-gray-400"/><input className="flex-1 bg-zinc-800/60 border border-zinc-700 rounded-xl px-3 py-2 text-sm" placeholder="Add location" value={location} onChange={e=>setLocation(e.target.value)} /></div>
          <div className="flex items-start gap-2"><FileText className="h-4 w-4 text-gray-400 mt-2"/><textarea className="flex-1 bg-zinc-800/60 border border-zinc-700 rounded-xl px-3 py-2 text-sm" rows={3} placeholder="Add description" value={notes} onChange={e=>setNotes(e.target.value)} /></div>


          <div className="flex items-center gap-2 text-sm">
            <span className="text-gray-400">Color</span>
            <div className="flex gap-2">{colors.map(c=> (
              <button key={c} onClick={()=>setColor(c)} className={`h-5 w-5 rounded-full border ${color===c? 'ring-2 ring-yellow-400 border-yellow-300':'border-zinc-600'}`} style={{background:c}}/>
            ))}</div>
          </div>


          <div className="flex items-center justify-between pt-2">
            {mode==='edit' ? (
              <button onClick={remove} className="text-red-400 hover:text-red-300 text-sm">Delete</button>
            ) : <span/>}
            <div className="flex gap-2">
              <button onClick={onClose} className="px-3 py-1 rounded-xl border border-zinc-700 hover:bg-zinc-800">Cancel</button>
              <button onClick={save} className="px-3 py-1 rounded-xl border border-yellow-500/30 text-yellow-300 hover:bg-yellow-500/10">Save</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}



Thanks — I tried to directly update your canvas file to add:

a Google-style right sidebar (shortcuts),

search in the toolbar,

and recurrence end options + ICS UNTIL/COUNT,

but the canvas tool rejected two replacements because they matched your current text exactly (it prevents “no-op” edits). So I couldn’t patch it in-place.

No worries — here are drop-in diffs you can paste manually. They’re minimal and focused.

1) Add search to the toolbar
A) Extend component state (near the top of CalendarApp)
const [q, setQ] = useState("");

B) Filter events by query (replace your filteredEvents = events;)
const filteredEvents = events.filter(e => {
  if (!q.trim()) return true;
  const hay = `${e.title||''} ${e.location||''} ${e.notes||''}`.toLowerCase();
  return hay.includes(q.toLowerCase());
});

C) Pass search to <Toolbar ... />
<Toolbar
  title={title}
  view={view}
  setView={setView}
  onToday={goToday}
  onPrev={goPrev}
  onNext={goNext}
  onAdd={()=> setModal({ mode:'create', event:null, anchorDate: new Date(cursor) })}
  onExportICS={()=> downloadICS(filteredEvents)}
  query={q}
  setQuery={setQ}
/>

D) Update Toolbar signature + add the input
function Toolbar({ title, view, setView, onToday, onPrev, onNext, onAdd, onExportICS, query, setQuery }) {
  return (
    <div className="flex items-center justify-between px-2 py-2">
      <div className="flex items-center gap-2">
        {/* left controls... */}
      </div>

      <div className="flex items-center gap-2">
        {/* Search */}
        <div className="hidden md:flex items-center">
          <input
            value={query}
            onChange={e=>setQuery(e.target.value)}
            placeholder="Search"
            className="mr-2 w-48 bg-zinc-900 border border-zinc-700 rounded-xl px-3 py-1 text-sm focus:outline-none focus:border-yellow-500/40"
          />
        </div>

        {/* view switch + Add + Export ICS (existing) */}
      </div>
    </div>
  );
}

2) Right sidebar (Google-like shortcuts)
A) Narrow the main column and add sidebar

Change:

<main className="col-span-12 lg:col-span-9 xl:col-span-10">


to:

<main className="col-span-12 lg:col-span-9 xl:col-span-8">


Then right after </main> insert:

{/* Right shortcuts (Google-like) */}
<RightShortcuts onCreate={()=> setModal({ mode:'create', event:null, anchorDate: new Date(cursor) })} />

B) Add the component (place near bottom of file)
function RightShortcuts({ onCreate }) {
  return (
    <aside className="hidden xl:flex xl:col-span-2 flex-col items-center gap-3">
      <div className="rounded-2xl border border-zinc-800 bg-zinc-900 p-2 w-full">
        <div className="text-sm font-medium mb-2 px-1">Shortcuts</div>
        <div className="flex flex-col gap-2">
          <button
            onClick={onCreate}
            className="w-full justify-start px-3 py-2 rounded-xl border border-yellow-500/30 text-yellow-300 hover:bg-yellow-500/10 flex items-center gap-2"
          >
            <Plus className="h-4 w-4" /> Create event
          </button>
          <button className="w-full justify-start px-3 py-2 rounded-xl border border-zinc-700 hover:bg-zinc-800 flex items-center gap-2">
            <CalIcon className="h-4 w-4" /> Tasks (mock)
          </button>
          <button className="w-full justify-start px-3 py-2 rounded-xl border border-zinc-700 hover:bg-zinc-800 flex items-center gap-2">
            <CalIcon className="h-4 w-4" /> Keep notes (mock)
          </button>
        </div>
      </div>
    </aside>
  );
}

3) Recurrence end options in the modal
A) In EventModal state (add these)
const [recur, setRecur] = useState(event?.rrule ? 'custom' : 'none');
const [freq, setFreq] = useState(event?.rrule?.freq || 'DAILY');
const [interval, setInterval] = useState(event?.rrule?.interval || 1);
const [byWeekday, setByWeekday] = useState(event?.rrule?.byDay || []);

const [endMode, setEndMode] = useState(
  event?.rrule?.count ? 'count' :
  event?.rrule?.until ? 'until' : 'never'
);
const [count, setCount] = useState(event?.rrule?.count || 10);
const [until, setUntil] = useState(
  event?.rrule?.until
    ? new Date(event.rrule.until).toISOString().slice(0,16)
    : toLocalIso(addDays(new Date(start), 30))
);

B) Build rrule with COUNT/UNTIL
const buildRRule = ()=>{
  if (recur === 'none') return undefined;
  const rule = { freq, interval };
  if (freq === 'WEEKLY' && byWeekday.length) rule.byDay = byWeekday;
  if (endMode === 'count') rule.count = Math.max(1, Number(count)||1);
  if (endMode === 'until') rule.until = new Date(until);
  return rule;
};

C) Recurrence UI block (replace your existing one)
<div className="rounded-xl border border-zinc-700 p-2">
  <div className="text-xs text-gray-400 mb-1">Repeat</div>
  <select value={recur} onChange={e=>setRecur(e.target.value)} className="bg-zinc-800/60 border border-zinc-700 rounded px-2 py-1 text-sm">
    <option value="none">Does not repeat</option>
    <option value="custom">Custom…</option>
  </select>

  {recur==='custom' && (
    <div className="mt-2 space-y-3 text-sm">
      <div className="flex items-center gap-2">
        <span className="text-gray-400">Every</span>
        <input type="number" min={1} value={interval} onChange={e=>setInterval(parseInt(e.target.value)||1)} className="w-16 bg-zinc-800/60 border border-zinc-700 rounded px-2 py-1"/>
        <select value={freq} onChange={e=>setFreq(e.target.value)} className="bg-zinc-800/60 border border-zinc-700 rounded px-2 py-1">
          <option value="DAILY">day(s)</option>
          <option value="WEEKLY">week(s)</option>
          <option value="MONTHLY">month(s)</option>
        </select>
      </div>

      {freq==='WEEKLY' && (
        <div className="flex gap-2 flex-wrap">
          {['Mon','Tue','Wed','Thu','Fri','Sat','Sun'].map((l,i) => {
            const code = ['MO','TU','WE','TH','FR','SA','SU'][i];
            const active = byWeekday.includes(code);
            return (
              <button key={l} type="button" onClick={()=> setByWeekday(prev => active ? prev.filter(x=>x!==code) : [...prev, code])}
                className={`px-2 py-1 rounded border text-xs ${active? 'border-yellow-500/60 text-yellow-300':'border-zinc-700 text-gray-300'}`}>
                {l}
              </button>
            );
          })}
        </div>
      )}

      {/* End options */}
      <div className="space-y-2">
        <div className="text-xs text-gray-400">Ends</div>
        <div className="flex items-center gap-3 flex-wrap">
          <label className="flex items-center gap-2">
            <input type="radio" name="endMode" checked={endMode==='never'} onChange={()=>setEndMode('never')} className="accent-yellow-400" />
            Never
          </label>
          <label className="flex items-center gap-2">
            <input type="radio" name="endMode" checked={endMode==='count'} onChange={()=>setEndMode('count')} className="accent-yellow-400" />
            After
            <input type="number" min={1} value={count} onChange={e=>setCount(e.target.value)} className="w-16 bg-zinc-800/60 border border-zinc-700 rounded px-2 py-1" />
            occurrences
          </label>
          <label className="flex items-center gap-2">
            <input type="radio" name="endMode" checked={endMode==='until'} onChange={()=>setEndMode('until')} className="accent-yellow-400" />
            On date
            <input type="datetime-local" value={until} onChange={e=>setUntil(e.target.value)} className="bg-zinc-800/60 border border-zinc-700 rounded px-2 py-1" />
          </label>
        </div>
      </div>
    </div>
  )}
</div>

4) ICS builder: support COUNT and UNTIL

In your existing rruleToString:

function rruleToString(rrule){
  if(!rrule) return '';
  const parts=[`FREQ=${rrule.freq||'DAILY'}`, `INTERVAL=${rrule.interval||1}`];
  if(rrule.byDay && rrule.byDay.length) parts.push(`BYDAY=${rrule.byDay.join(',')}`);
  if(rrule.byMonth) parts.push(`BYMONTH=${rrule.byMonth}`);
  if(rrule.byMonthDay) parts.push(`BYMONTHDAY=${rrule.byMonthDay}`);
  if(rrule.count) parts.push(`COUNT=${rrule.count}`);
  if(rrule.until){
    // UNTIL must be UTC basic format
    parts.push(`UNTIL=${dtstamp(new Date(rrule.until))}`);
  }
  return `RRULE:${parts.join(';')}`;
}


That’s it — paste these snippets in the same file you already have in the canvas, and you’ll get:

a right-side shortcuts bar (very Google-ish),

top-right search filtering,

recurrence end options (Never / After N / On date),

ICS export that includes COUNT or UNTIL.