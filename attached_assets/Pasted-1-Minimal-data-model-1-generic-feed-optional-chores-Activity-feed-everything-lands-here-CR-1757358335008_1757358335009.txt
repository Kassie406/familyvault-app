1) Minimal data model (1 generic feed + optional chores)
-- Activity feed (everything lands here)
CREATE TABLE IF NOT EXISTS activities (
  id SERIAL PRIMARY KEY,
  couple_id TEXT NOT NULL,
  type TEXT NOT NULL,              -- 'memory' | 'plan_date' | 'love_note' | 'goal' | 'chore_complete'
  title TEXT NOT NULL,             -- short line for the feed
  payload JSONB DEFAULT '{}'::jsonb,
  points INT DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- Optional: chores the couple can complete
CREATE TABLE IF NOT EXISTS chores (
  id SERIAL PRIMARY KEY,
  couple_id TEXT NOT NULL,
  title TEXT NOT NULL,
  due_on DATE,
  points INT DEFAULT 10,
  completed_by TEXT,
  completed_at TIMESTAMPTZ
);


You can store “memories / love notes / goals” details inside payload to keep it simple (no extra tables yet).

2) Express routes

Create server/routes/activities.js:

const router = require('express').Router();
const { z } = require('zod');
const db = require('../db'); // your query helper
const POINTS = { memory: 5, plan_date: 8, love_note: 4, goal: 6, chore_complete: 0 };

function coupleId(req) {
  // however you get it from session/JWT
  return req.user?.couple_id || req.headers['x-couple-id'];
}

/* Feed */
router.get('/', async (req, res) => {
  const cid = coupleId(req);
  const rows = await db.query(
    'SELECT id,type,title,payload,points,created_at FROM activities WHERE couple_id=$1 ORDER BY created_at DESC LIMIT 30',
    [cid]
  );
  res.json(rows.rows);
});

/* Quick actions */
const quickSchema = z.object({
  type: z.enum(['memory', 'plan_date', 'love_note', 'goal']),
  title: z.string().min(1),
  payload: z.any().optional()
});

router.post('/quick', async (req, res) => {
  const body = quickSchema.parse(req.body);
  const cid = coupleId(req);
  const pts = POINTS[body.type] ?? 0;
  const row = await db.query(
    'INSERT INTO activities (couple_id,type,title,payload,points) VALUES ($1,$2,$3,$4,$5) RETURNING *',
    [cid, body.type, body.title, body.payload || {}, pts]
  );
  res.status(201).json(row.rows[0]);
});

/* Chores */
router.get('/chores', async (req,res)=>{
  const cid = coupleId(req);
  const r = await db.query('SELECT * FROM chores WHERE couple_id=$1 ORDER BY due_on NULLS LAST, id DESC', [cid]);
  res.json(r.rows);
});

router.post('/chores/:id/complete', async (req,res)=>{
  const { id } = req.params;
  const uid = req.user?.id || 'user';
  const cid = coupleId(req);
  const r = await db.query(
    'UPDATE chores SET completed_by=$1, completed_at=now() WHERE id=$2 AND couple_id=$3 RETURNING *',
    [uid, id, cid]
  );
  if (!r.rowCount) return res.status(404).json({error:'Not found'});
  const chore = r.rows[0];
  await db.query(
    'INSERT INTO activities (couple_id,type,title,payload,points) VALUES ($1,$2,$3,$4,$5)',
    [cid,'chore_complete',`Chore: ${chore.title}`, { chore_id: chore.id }, chore.points || 0]
  );
  res.json({ ok:true });
});

module.exports = router;


Register it:

// server/index.js
app.use('/api/activities', require('./routes/activities'));

3) React components (drop into your UI)
Quick actions card (buttons + small modals)
// src/components/CouplesQuickActions.jsx
import { useState } from 'react';

export default function CouplesQuickActions() {
  const [open, setOpen] = useState(null); // 'memory' | 'plan_date' | 'love_note' | 'goal' | null
  const [title, setTitle] = useState('');
  const [extra, setExtra] = useState(''); // optional field

  async function submit(type){
    const res = await fetch('/api/activities/quick', {
      method:'POST',
      headers:{'Content-Type':'application/json','x-couple-id':'demo-couple'},
      body: JSON.stringify({ type, title, payload: { extra } })
    });
    if(res.ok){ setOpen(null); setTitle(''); setExtra(''); document.dispatchEvent(new Event('feed:update')); }
  }

  const ActionBtn = ({icon, label, onClick}) => (
    <button onClick={onClick} className="flex items-center gap-2 w-full text-left p-2 rounded hover:bg-neutral-800">
      {icon}<span>{label}</span>
    </button>
  );

  return (
    <div className="rounded-xl border border-neutral-800 bg-neutral-900 p-4">
      <div className="text-sm text-neutral-400 mb-2">QUICK ACTIONS</div>
      <div className="grid gap-2">
        <ActionBtn label="Add Memory" onClick={()=>setOpen('memory')} />
        <ActionBtn label="Plan Date" onClick={()=>setOpen('plan_date')} />
        <ActionBtn label="Send Love Note" onClick={()=>setOpen('love_note')} />
        <ActionBtn label="Set Goals" onClick={()=>setOpen('goal')} />
      </div>

      {open && (
        <div className="fixed inset-0 bg-black/60 flex items-center justify-center z-50">
          <div className="bg-neutral-900 border border-neutral-800 rounded-xl p-4 w-full max-w-md">
            <div className="text-lg font-semibold mb-2 capitalize">{open.replace('_',' ')} </div>
            <input
              className="w-full h-11 px-3 rounded border border-neutral-700 bg-neutral-800"
              placeholder="Title"
              value={title} onChange={e=>setTitle(e.target.value)}
            />
            <textarea
              className="w-full h-24 mt-2 p-3 rounded border border-neutral-700 bg-neutral-800"
              placeholder="Details (optional)"
              value={extra} onChange={e=>setExtra(e.target.value)}
            />
            <div className="mt-3 flex gap-2 justify-end">
              <button className="px-4 h-10 rounded bg-neutral-800" onClick={()=>setOpen(null)}>Cancel</button>
              <button
                className="px-4 h-10 rounded bg-[var(--color-primary)] text-black font-semibold"
                onClick={()=>submit(open)}
                disabled={!title.trim()}
              >Save</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

Activity feed (shows points and dates)
// src/components/ActivityFeed.jsx
import { useEffect, useState } from 'react';

export default function ActivityFeed(){
  const [items, setItems] = useState([]);

  async function load(){
    const res = await fetch('/api/activities', { headers: { 'x-couple-id': 'demo-couple' }});
    const data = await res.json();
    setItems(data);
  }

  useEffect(()=>{
    load();
    const h = ()=>load();
    document.addEventListener('feed:update', h);
    return ()=>document.removeEventListener('feed:update', h);
  },[]);

  return (
    <div className="rounded-xl border border-neutral-800 bg-neutral-900">
      <div className="p-4 border-b border-neutral-800 flex items-center justify-between">
        <div className="text-sm text-neutral-400">COUPLE’S CONNECTION — RECENT</div>
        <button className="text-sm underline">View all</button>
      </div>
      {items.length === 0 ? (
        <div className="p-4 text-neutral-500">No recent activity</div>
      ) : (
        <ul className="divide-y divide-neutral-800">
          {items.map(it=>(
            <li key={it.id} className="flex items-center justify-between p-4">
              <div>
                <div className="text-neutral-200">{it.title}</div>
                <div className="text-xs text-neutral-500">{new Date(it.created_at).toLocaleDateString()}</div>
              </div>
              {it.points !== 0 && (
                <span className={`font-semibold ${it.points>0?'text-green-400':'text-red-400'}`}>
                  {it.points>0?'+':''}{it.points}
                </span>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

Optional: Chores list (complete → adds to feed)
// src/components/ChoresList.jsx
import { useEffect, useState } from 'react';

export default function ChoresList(){
  const [rows, setRows] = useState([]);
  async function load(){
    const res = await fetch('/api/activities/chores', { headers:{'x-couple-id':'demo-couple'}});
    setRows(await res.json());
  }
  async function complete(id){
    await fetch(`/api/activities/chores/${id}/complete`, { method:'POST', headers:{'x-couple-id':'demo-couple'} });
    document.dispatchEvent(new Event('feed:update')); load();
  }
  useEffect(()=>{ load(); },[]);
  return (
    <div className="rounded-xl border border-neutral-800 bg-neutral-900">
      <div className="p-4 border-b border-neutral-800 font-medium">Chores</div>
      <ul className="divide-y divide-neutral-800">
        {rows.map(c=>(
          <li key={c.id} className="p-4 flex items-center justify-between">
            <div>
              <div className="text-neutral-200">{c.title}</div>
              {c.due_on && <div className="text-xs text-neutral-500">Due {new Date(c.due_on).toLocaleDateString()}</div>}
            </div>
            {c.completed_at ? (
              <span className="text-xs text-green-400">Completed</span>
            ) : (
              <button className="px-3 h-9 rounded bg-[var(--color-primary)] text-black font-semibold"
                      onClick={()=>complete(c.id)}>
                Mark done (+{c.points})
              </button>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

4) Drop them into your page
// src/pages/couples/together.jsx  (or your route)
import CouplesQuickActions from '@/components/CouplesQuickActions';
import ActivityFeed from '@/components/ActivityFeed';
import ChoresList from '@/components/ChoresList';

export default function Together(){
  return (
    <div className="max-w-4xl mx-auto p-4 md:p-6 space-y-4">
      <div className="rounded-2xl bg-gradient-to-b from-neutral-900 to-neutral-950 border border-neutral-800 p-6">
        <div className="text-sm text-[var(--color-primary)]">Couple’s Connection</div>
        <h1 className="text-3xl md:text-4xl font-bold mt-1">Together</h1>
      </div>

      <div className="grid md:grid-cols-2 gap-4">
        <ActivityFeed />
        <CouplesQuickActions />
      </div>

      <ChoresList />
    </div>
  );
}

5) Quick QA before you call it “done”

Add memory/date/love note/goal → feed shows a new line with +points.

Complete a chore → +points equals chore’s points.

API errors show a small toast (you can add later).

Focus rings visible; all actions are keyboard-accessible.

Dark theme matches your screenshot; gold #D4AF37 (or your #c5a000) is used for accents.

6) Easy next wins

“View all” → paginated /couples/activity list

“Plan Date” payload: store date, time, location and show a small badge in the feed line

Add filters to feed (All / Notes / Goals / Chores)

Add streaks (daily/weekly actions) for extra +points