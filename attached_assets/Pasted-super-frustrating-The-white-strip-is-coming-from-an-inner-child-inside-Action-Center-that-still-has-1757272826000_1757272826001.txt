super frustrating. The white strip is coming from an inner child inside Action Center that still has a light background class (DaisyUI card, card-body, bg-base-100, bg-white, etc). Even if the outer card is perfect, that inner bg will show exactly like your screenshot.

Let’s end this in one shot with a scoped, nuclear override that cannot be re-broken by library classes.

1) Add this tiny CSS (guaranteed fix)

Create (or update) src/styles/action-center.css with exactly this:

/* 100% scoped to the Action Center card */

/* Force ALL inner backgrounds transparent (nuclear, but safe and scoped) */
#action-center-card,
#action-center-card * {
  background: transparent !important;
}

/* Re-apply our card’s dark gradient and border on the outer node only */
#action-center-card {
  border-radius: 16px;                               /* rounded-2xl */
  border: 1px solid rgba(255,255,255,0.08);
  background-image: linear-gradient(180deg,#0b0b0e 0%,#0e0e14 100%) !important;
  box-shadow: 0 10px 28px rgba(0,0,0,.45);
  transition: box-shadow .2s ease, border-color .2s ease;
  isolation: isolate; overflow: hidden;
}

/* Gold glow on hover (no bg change) */
#action-center-card:hover {
  border-color: rgba(212,175,55,0.40);
  box-shadow:
    0 0 0 1px rgba(212,175,55,.35),
    0 18px 50px rgba(212,175,55,.12);
}

/* Optional: keep links from turning blue/underlined unless hover */
#action-center-card a { color: inherit; text-decoration: none; }
#action-center-card a:hover { text-decoration: underline; }


This forces transparency for every child inside the card and re-applies the gradient only on the outer container. Nothing inside can ever paint a light bg again.

2) Make sure the component uses the scoped id and imports the CSS

In your Action Center component (adjust path/name to match yours):

// src/components/family/ActionCenterCard.tsx (for example)
import "@/styles/action-center.css"; // <— make sure this import exists

export function ActionCenterCard() {
  return (
    <div
      id="action-center-card"
      className="
        p-4
        /* You may keep your Tailwind gradient/border classes here too, the CSS above wins */
      "
    >
      {/* existing Action Center content */}
    </div>
  );
}


Important:

The id must be on the outermost visible card node that surrounds the title and the “All caught up!” text.

Do not put bg-* or card classes on any wrappers around it. If a layout wrapper is required, keep it bg-transparent p-0.

3) Quick verification checklist (takes <30s)

Hard refresh (Cmd/Ctrl+Shift+R).

Hover the card—should show gold glow; no white strip anywhere.

In DevTools, select the white strip element (if you still see one); in Computed → Background, it should say transparent (overridden by #action-center-card * { background: transparent !important; }).

If that still doesn’t fix it, it means the CSS file isn’t being imported (step 2). 99% of the time, adding the import + id on the correct node resolves it immediately.

(Optional) One-line Tailwind-only variant

If you prefer to avoid a CSS file, you can wrap your content like this. It’s aggressive, but works:

<div className="relative">
  <div
    id="action-center-card"
    className="
      relative isolate overflow-hidden rounded-2xl border border-white/8
      p-4 shadow-[0_10px_28px_rgba(0,0,0,.45)] transition-all duration-200
      hover:border-[#D4AF37]/40 hover:shadow-[0_0_0_1px_rgba(212,175,55,.35),0_18px_50px_rgba(212,175,55,.12)]
      [background-image:linear-gradient(180deg,#0b0b0e_0%,#0e0e14_100%)!important]
      [&_*]:![background:transparent]   /* nukes inner backgrounds */
    "
  >
    {/* content */}
  </div>
</div>


The CSS-file approach is cleaner and more maintainable, but both solve your screenshot.