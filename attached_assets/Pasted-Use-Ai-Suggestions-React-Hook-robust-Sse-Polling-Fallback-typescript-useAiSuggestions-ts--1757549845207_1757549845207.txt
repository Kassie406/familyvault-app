Use Ai Suggestions React Hook (robust, Sse + Polling Fallback)
· typescript
// useAiSuggestions.ts
          } else {
            throw e;
          }
        }


        // Only now show analyzing state
        setState({ kind: "analyzing", step: "Looking for key fields (1/3)" });


        const result = await streamOrPoll(apiBase, jobId, sseHeartbeatMs, pollCfg, totalTimeoutMs);
        if (result.status === "completed") {
          setState({ kind: "success", suggestions: result.suggestions });
        } else if (result.status === "failed") {
          setState({ kind: "error", message: result.error || "Analysis failed" });
        }
      } catch (e: any) {
        const msg = String(e?.message || e);
        if (msg.includes("Timeout")) setState({ kind: "timeout", message: msg });
        else setState({ kind: "error", message: msg });
      } finally {
        clearTimeout(guardTimer);
        cancelRef.current = null;
      }
    },
    [apiBase, pollCfg.max, pollCfg.start, sseHeartbeatMs, totalTimeoutMs, cancel]
  );


  const retry = useCallback(() => {
    // Consumer can call run() again with same params they track externally
    setState({ kind: "idle" });
  }, []);


  return { state, run, retry, cancel } as const;
}


// =========================
// Example usage in a component
// =========================
/*
import { useAiSuggestions } from "./useAiSuggestions";


export default function AiSuggestPanel({ file, familyId }: { file?: File; familyId: string }) {
  const { state, run, retry, cancel } = useAiSuggestions({ logs: true });


  return (
    <div className="rounded-xl p-4 bg-zinc-900 border border-zinc-800">
      <div className="flex items-center gap-2 text-yellow-400 font-medium">
        <span>⚡ AI Suggestions</span>
      </div>


      {state.kind === "idle" && (
        <button className="mt-3 px-3 py-2 rounded-lg bg-yellow-500 text-black" onClick={() => file && run({ file, familyId })}>
          Start analysis
        </button>
      )}


      {state.kind === "analyzing" && (
        <div className="mt-3 flex items-center justify-between">
          <p className="text-zinc-300">{state.step}…</p>
          <button className="text-sm text-zinc-400 underline" onClick={cancel}>Cancel</button>
        </div>
      )}


      {state.kind === "success" && (
        <pre className="mt-3 text-zinc-200 text-sm overflow-auto max-h-64">{JSON.stringify(state.suggestions, null, 2)}</pre>
      )}


      {state.kind === "error" && (
        <div className="mt-3 text-red-400">
          <div className="font-semibold">Analysis failed</div>
          <div className="text-sm opacity-90">{state.message}</div>
          <div className="mt-2 flex gap-3">
            <button className="text-sm underline" onClick={retry}>Try again</button>
          </div>
        </div>
      )}


      {state.kind === "timeout" && (
        <div className="mt-3 text-yellow-400">
          <div className="font-semibold">This is taking longer than expected.</div>
          <div className="text-sm opacity-90">{state.message}</div>
          <div className="mt-2 flex gap-3">
            <button className="text-sm underline" onClick={retry}>Retry</button>
          </div>
        </div>
      )}
    </div>
  );
}
*/