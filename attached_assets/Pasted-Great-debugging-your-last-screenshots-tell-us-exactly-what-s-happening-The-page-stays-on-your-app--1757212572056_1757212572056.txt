Great debugging—your last screenshots tell us exactly what’s happening:

The page stays on your app (good).

The verify request fires (Network shows verify).

The server returns 500 and you see “Invalid verification code”.

That means your verify endpoint is being called, but it’s failing inside the handler (likely email/case mismatch, stale code, or request body not parsed). Do the following fixes—these solve 99% of cases:

Do this now (copy/paste level)
1) Frontend: normalize + post to the right route

Make sure you lowercase the email and trim the code before POST, and that you call your email-verify route (not Google).

// NewSignIn.tsx (verify button handler)
async function onVerify(email: string, code: string) {
  const payload = {
    email: email.trim().toLowerCase(),
    code: code.trim(),
  };

  const res = await fetch("/login/verify", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const { error } = await res.json().catch(() => ({ error: "Invalid verification code" }));
    alert(error);
    return;
  }

  window.location.href = "/dashboard"; // NOT /auth/google/callback
}


Tip: Temporarily hide the Google button until OAuth is configured, so nothing redirects you to /auth/google/callback.

2) Backend: parse JSON, store latest code, compare lowercase

Make sure your server parses JSON and handles the newest code only.

// server setup
import express from "express";
const app = express();
app.use(express.json()); // IMPORTANT so req.body works

// Send code (already working but ensure lowercase + latest)
app.post("/login/send", async (req, res) => {
  const email = String(req.body.email || "").trim().toLowerCase();
  const code  = String(Math.floor(100000 + Math.random() * 900000));
  await db.set(`otp:${email}`, code, { EX: 600 }); // 10 min TTL
  await mailer.send({ to: email, subject: "Your code", text: `Your code: ${code}` });
  res.json({ ok: true });
});

// Verify code
app.post("/login/verify", async (req, res) => {
  try {
    const email = String(req.body.email || "").trim().toLowerCase();
    const code  = String(req.body.code || "").trim();

    if (!email || !/^\d{6}$/.test(code)) {
      return res.status(400).json({ error: "Invalid verification code" });
    }

    const saved = await db.get(`otp:${email}`);

    // Debug logs (temporarily):
    console.log("[verify] email:", email, "sent:", code, "saved:", saved);

    if (!saved || saved !== code) {
      return res.status(400).json({ error: "Invalid verification code" });
    }

    await db.del(`otp:${email}`); // one-time use
    // create session cookie here...
    return res.json({ ok: true });
  } catch (e) {
    console.error("[verify] error:", e);
    return res.status(500).json({ error: "Server error during verification" });
  }
});

Why this fixes it

500 often means your handler threw (e.g., req.body undefined because express.json() missing, DB client not ready, etc.). The try/catch returns a clean JSON error so you can see it.

Lowercasing both on send + verify prevents the K vs k mismatch you see in the UI (Kassandra406@…).

Overwrite with latest ensures only the most recent 6-digit code is valid (old emails won’t work).

Trim avoids invisible spaces when pasting.

3) Retest cleanly

Hard refresh (Ctrl/Cmd+Shift+R).

Click Back to email → Resend code (use the newest email).

Open DevTools → Network: confirm the request is POST /login/verify, payload has lowercase email + 6 digits.

Watch server logs: you should see the [verify] log lines; if mismatch, it prints both values so you know why.

4) If it still 500s

Ensure your DB/Redis client is initialized before routes.

If codes were stored in memory, any server restart clears them; use Redis/DB with TTL.

If you’re behind a proxy, confirm your verify route path matches exactly (/login/verify).

Check that your app isn’t auto-redirecting to /auth/google/callback on submit (remove any window.location tied to Google flow).

Send me the Network → Request URL & Request Payload for verify and the server log line from [verify] if it still fails—I’ll pinpoint the exact line to change.