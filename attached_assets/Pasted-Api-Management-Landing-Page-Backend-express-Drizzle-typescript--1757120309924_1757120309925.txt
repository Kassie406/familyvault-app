Api Management Landing Page + Backend (express + Drizzle)
· typescript
// =============================================
// FRONTEND: Share a Document Modal (React)
// File: client/src/components/documents/ShareDocumentModal.tsx
// =============================================
import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { toast } from "sonner";


interface DocumentItem {
  id: string;
  title: string;
}
interface PolicyItem {
  id: string;
  name: string;
}


export function ShareDocumentModal({ docId }: { docId: string }) {
  const [open, setOpen] = useState(false);
  const [scope, setScope] = useState("family");
  const [userId, setUserId] = useState("");
  const [policyId, setPolicyId] = useState<string | undefined>(undefined);
  const [allowDownload, setAllowDownload] = useState(true);
  const [expiresAt, setExpiresAt] = useState("");
  const [policies, setPolicies] = useState<PolicyItem[]>([]);


  useEffect(() => {
    if (open) {
      fetch("/api/link-policies")
        .then((r) => r.json())
        .then((d) => setPolicies(d.items ?? []));
    }
  }, [open]);


  async function onSubmit() {
    const body: any = { scope, canDownload: allowDownload };
    if (scope === "user") body.sharedWithUserId = userId;
    if (scope === "link") body.policyId = policyId;
    if (expiresAt) body.expiresAt = expiresAt;


    const res = await fetch(`/api/documents/${docId}/share`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });
    if (!res.ok) return toast.error("Failed to share document");
    toast.success("Document shared");
    setOpen(false);
  }


  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button size="sm" variant="outline">Share</Button>
      </DialogTrigger>
      <DialogContent className="bg-zinc-900 border border-zinc-800">
        <DialogHeader>
          <DialogTitle className="text-yellow-400">Share Document</DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          <div>
            <Label>Scope</Label>
            <Select value={scope} onValueChange={(v) => setScope(v)}>
              <SelectTrigger className="bg-zinc-900 border-zinc-800">
                <SelectValue />
              </SelectTrigger>
              <SelectContent className="bg-zinc-900 border-zinc-800">
                <SelectItem value="family">Family</SelectItem>
                <SelectItem value="user">Specific User</SelectItem>
                <SelectItem value="link">Share Link</SelectItem>

All set — I added a “Snooze until…” picker with proper server-side caps.

What changed
Backend

POST /api/updates/:id/snooze now accepts an optional until datetime and clamps it:

Minimum: now + 5 minutes

Maximum: dueAt (if present) else 30 days from now

If until is missing/invalid, it defaults to dueAt or +7 days (same as before).

Frontend

New SnoozeUntilModal component (date-time picker).

Shows min/max in the input and a hint:

“You can snooze up to the due time.” or “Max 30 days.”

On save, calls the snooze endpoint with { until } and removes the item from the list for the current user.

How to wire it

In your FamilyUpdates component’s actions section, swap the old button:

import SnoozeUntilModal from "./SnoozeUntilModal";

const onSnoozed = (id: string) => setItems(prev => prev.filter(x => x.id !== id));

// ...
<SnoozeUntilModal update={u} onSnoozed={onSnoozed} />


No realtime needed for snooze (it’s per-user). Dismiss stays global and still broadcasts.