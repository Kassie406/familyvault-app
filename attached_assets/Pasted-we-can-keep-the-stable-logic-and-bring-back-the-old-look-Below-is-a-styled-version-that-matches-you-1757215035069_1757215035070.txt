we can keep the stable logic and bring back the old look. Below is a styled version that matches your previous dark theme + gold buttons, but without the crashy parts.

Drop-in replacement (keeps OTP flow, restores look)

Replace client/src/auth/NewSignIn.tsx with this Tailwind version:

import { useEffect, useState } from "react";

type Step = "email" | "code";

export default function NewSignIn() {
  const [ready, setReady] = useState(false);
  const [step, setStep] = useState<Step>("email");
  const [email, setEmail] = useState("");
  const [code, setCode] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [sending, setSending] = useState(false);
  const [verifying, setVerifying] = useState(false);

  // Warmup with timeout fallback (avoids infinite spinner)
  useEffect(() => {
    let done = false;
    const t = setTimeout(() => !done && setReady(true), 2500);
    (async () => {
      try { await fetch("/login/start", { method: "POST" }); } catch {}
      done = true; clearTimeout(t); setReady(true);
    })();
    return () => clearTimeout(t);
  }, []);

  const onSend = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null); setSending(true);
    try {
      const clean = email.trim().toLowerCase();
      const res = await fetch("/login/send", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: clean }),
      });
      if (!res.ok) {
        const j = await res.json().catch(() => ({}));
        throw new Error(j.error || "Could not send code");
      }
      setEmail(clean);
      setStep("code");
    } catch (err: any) {
      setError(err.message || "Could not send code");
    } finally {
      setSending(false);
    }
  };

  const onVerify = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null); setVerifying(true);
    try {
      const cleanCode = code.trim();
      if (!/^\d{6}$/.test(cleanCode)) throw new Error("Enter the 6-digit code");
      const res = await fetch("/login/verify", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, code: cleanCode }),
      });
      if (!res.ok) {
        const j = await res.json().catch(() => ({}));
        throw new Error(j.error || "Invalid verification code");
      }
      window.location.href = "/dashboard";
    } catch (err: any) {
      setError(err.message || "Invalid verification code");
    } finally {
      setVerifying(false);
    }
  };

  if (!ready) {
    return (
      <div className="min-h-screen grid place-items-center bg-gradient-to-b from-[#0b0b0b] to-black text-white">
        <div className="animate-pulse text-sm opacity-80">Loading…</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#0b0b0b] to-black text-white">
      <div className="container mx-auto px-4 py-10">
        <div className="mx-auto mt-20 w-full max-w-md rounded-2xl bg-white/5 backdrop-blur p-6 shadow-xl border border-white/10">
          <h1 className="text-2xl font-semibold mb-6">Welcome back</h1>

          {step === "email" && (
            <form onSubmit={onSend} className="space-y-4">
              <label className="block text-sm text-white/80">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="you@email.com"
                required
                className="w-full rounded-lg bg-black/60 border border-white/10 px-3 py-2 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-[#b59732]"
              />
              <button
                type="submit"
                disabled={sending}
                className="w-full rounded-lg bg-[#b59732] text-black font-semibold py-2 transition disabled:opacity-60 hover:brightness-110"
              >
                {sending ? "Sending…" : "Continue"}
              </button>

              {/* Keep Google hidden until OAuth is configured */}
              {/* <button className="w-full rounded-lg bg-white/10 border border-white/15 py-2">Continue with Google</button> */}
            </form>
          )}

          {step === "code" && (
            <form onSubmit={onVerify} className="space-y-4">
              <p className="text-sm text-white/70">
                We sent a 6-digit code to <span className="font-semibold">{email}</span>
              </p>
              <input
                inputMode="numeric"
                pattern="\d{6}"
                maxLength={6}
                value={code}
                onChange={(e) => setCode(e.target.value)}
                placeholder="Enter 6-digit code"
                required
                className="w-full tracking-widest text-center rounded-lg bg-black/60 border border-white/10 px-3 py-3 text-white placeholder-white/40 focus:outline-none focus:ring-2 focus:ring-[#b59732]"
              />
              <button
                type="submit"
                disabled={verifying}
                className="w-full rounded-lg bg-[#b59732] text-black font-semibold py-2 transition disabled:opacity-60 hover:brightness-110"
              >
                {verifying ? "Verifying…" : "Verify & Sign In"}
              </button>
              <button
                type="button"
                onClick={() => { setCode(""); setStep("email"); }}
                className="w-full rounded-lg border border-white/15 text-white/90 py-2 hover:bg-white/5"
              >
                ← Back to email
              </button>
            </form>
          )}

          {error && <p className="text-rose-400 mt-4 text-sm">{error}</p>}
        </div>
      </div>
    </div>
  );
}

Why this works

Same solid OTP logic (no innerHTML, no fragile imports).

Restores the dark card + gold button look.

Spinner can’t get “stuck” (timeout → show form).

Google button is commented out until OAuth creds are set.