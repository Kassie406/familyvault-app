1) Fix the SSN mapping (AnalyzeDocument + QUERIES)

Find your documentTypes object and replace the ssn_card entry with this:

'ssn_card': {
  label: 'Social Security Card',
  icon: CreditCard,
  api: 'AnalyzeDocument (Queries)',   // <— FIXED (was AnalyzeID)
  fields: ['SSN_MASKED', 'FULL_NAME', 'ISSUER'],
  category: 'Identity Documents'
},


Rationale: SSN cards are not supported by AnalyzeID. QUERIES is the reliable path and you’ll get ssnMasked, fullName, issuer.

2) Wire the UI to your backend (keeps your mocks as fallback)

This replaces your current analyzeDocument mock with a version that:

Tries POST /api/inbox/analyze with { s3Key, documentType } if you pass a s3Key prop, or

Tries POST /api/inbox/analyze-upload with the file (if you have an upload endpoint), or

Falls back to your existing mock if the backend call fails.

2A) Add helpers (top of the file, under imports)
// Convert [{key,value,confidence}] → { KEY: { value, confidence } }
function fieldsArrayToMap(fieldsArr = []) {
  const out = {};
  for (const f of fieldsArr) {
    const key = String(f.key || '').toUpperCase().replace(/\s+/g, '_');
    out[key] = { value: f.value ?? '', confidence: typeof f.confidence === 'number' ? f.confidence : 0, pii: !!f.pii };
  }
  return out;
}

// Pretty label for API pill
function prettyApiFor(docType) {
  if (docType === 'drivers_license' || docType === 'passport') return 'AnalyzeID';
  if (docType === 'ssn_card') return 'AnalyzeDocument (Queries)';
  if (docType === 'insurance_card') return 'AnalyzeDocument (Queries)';
  return 'AnalyzeDocument (Queries)';
}

2B) Replace your entire analyzeDocument with this version
const analyzeDocument = useCallback(async (file, docType) => {
  setIsAnalyzing(true);
  setAnalysisProgress(0);

  // Simulate progress UI
  const steps = [15, 35, 60, 85, 100];
  for (const s of steps) {
    await new Promise(r => setTimeout(r, 220));
    setAnalysisProgress(s);
  }

  // 1) If your page/component knows the S3 key already, you can pass it in via a prop.
  // For now, we’ll try an upload endpoint when available; otherwise we’ll mock.
  try {
    // Try a backend that accepts a file and routes to Textract for you
    // Endpoint option A: single step upload+analyze
    const fd = new FormData();
    fd.append('file', file);
    fd.append('documentType', docType); // optional; backend can auto-detect

    // Adjust endpoint to your server:
    // - If you built /api/inbox/analyze-upload (file form-data)
    // - Or switch to /api/inbox/analyze with { s3Key, documentType } JSON if you already uploaded
    const res = await fetch('/api/inbox/analyze-upload', { method: 'POST', body: fd });
    if (!res.ok) throw new Error(await res.text());
    const payload = await res.json(); // { ok: true, result: { documentType, fields: [...] } }

    if (payload?.ok && payload?.result) {
      const apiUsed = prettyApiFor(docType);
      const fieldsMap = fieldsArrayToMap(payload.result.fields);
      setExtractedData({
        api_used: apiUsed,
        confidence: 'high',
        fields: fieldsMap,
        suggestions: {
          title: file.name.replace(/\.[^/.]+$/, ''),
          category: documentTypes[docType]?.category?.toLowerCase().replace(/\s+/g, '_') || 'general',
          description: `${documentTypes[docType]?.label || 'Document'} analyzed with ${apiUsed}`
        }
      });
      setIsAnalyzing(false);
      return;
    }
    throw new Error('Bad response');
  } catch (e) {
    // Backend not ready? fall back to your existing mock data by doc type
    console.warn('Analyze via backend failed; using mock:', e?.message || e);
  }

  // 2) MOCK DATA (your original data with one fix: ssn uses AnalyzeDocument)
  const mockData = {
    'drivers_license': {
      api_used: 'AnalyzeID',
      confidence: 'high',
      fields: {
        'FIRST_NAME': { value: 'JOHN', confidence: 98.5 },
        'LAST_NAME': { value: 'DOE', confidence: 99.2 },
        'MIDDLE_NAME': { value: 'MICHAEL', confidence: 95.8 },
        'ADDRESS': { value: '123 MAIN STREET', confidence: 97.1 },
        'CITY_IN_ADDRESS': { value: 'ANYTOWN', confidence: 98.3 },
        'STATE_IN_ADDRESS': { value: 'CA', confidence: 99.5 },
        'ZIP_CODE_IN_ADDRESS': { value: '90210', confidence: 98.9 },
        'DATE_OF_BIRTH': { value: '01/15/1985', confidence: 99.1 },
        'EXPIRATION_DATE': { value: '01/15/2028', confidence: 98.7 },
        'DOCUMENT_NUMBER': { value: 'D1234567', confidence: 97.8 },
        'CLASS': { value: 'C', confidence: 99.0 },
        'RESTRICTIONS': { value: 'NONE', confidence: 96.5 },
        'ENDORSEMENTS': { value: 'NONE', confidence: 95.2 }
      },
      suggestions: {
        title: 'Driver\'s License - John Doe',
        category: 'identity_documents',
        description: 'California driver\'s license for John Michael Doe, expires 01/15/2028'
      }
    },
    'ssn_card': {
      api_used: 'AnalyzeDocument (Queries)', // <— FIXED
      confidence: 'high',
      fields: {
        'FULL_NAME': { value: 'JANE ELIZABETH SMITH', confidence: 98.8 },
        'SSN_MASKED': { value: 'XXX-XX-1234', confidence: 99.5, pii: true },
        'ISSUER': { value: 'Social Security Administration', confidence: 97.7 }
      },
      suggestions: {
        title: 'Social Security Card - Jane Smith',
        category: 'identity_documents',
        description: 'Social Security card detected; SSN masked.'
      }
    },
    'insurance_card': {
      api_used: 'AnalyzeDocument (Queries)',
      confidence: 'medium',
      fields: {
        'MEMBER_ID': { value: 'ABC123456789', confidence: 97.2 },
        'GROUP_NUMBER': { value: '12345', confidence: 95.8 },
        'POLICY_NUMBER': { value: 'POL-987654321', confidence: 96.5 },
        'FULL_NAME': { value: 'ROBERT JOHNSON', confidence: 97.9 },
        'PLAN_NAME': { value: 'PREMIUM HEALTH PLAN', confidence: 94.3 },
        'EFFECTIVE_DATE': { value: '01/01/2024', confidence: 96.7 },
        'ISSUER': { value: 'BlueHealth PPO', confidence: 96.1 }
      },
      suggestions: {
        title: 'Health Insurance Card - Robert Johnson',
        category: 'insurance',
        description: 'Premium health plan insurance card for Robert Johnson'
      }
    },
    'utility_bill': {
      api_used: 'AnalyzeDocument (Queries)',
      confidence: 'medium',
      fields: {
        'ACCOUNT_NUMBER': { value: '1234567890', confidence: 96.8 },
        'CUSTOMER_NAME': { value: 'SARAH WILLIAMS', confidence: 97.5 },
        'SERVICE_ADDRESS': { value: '456 OAK AVENUE, CITYVILLE, TX 75001', confidence: 95.2 },
        'BILLING_PERIOD': { value: '08/01/2024 - 08/31/2024', confidence: 94.1 },
        'AMOUNT_DUE': { value: '$127.45', confidence: 98.3 },
        'DUE_DATE': { value: '09/15/2024', confidence: 97.8 },
        'UTILITY_COMPANY': { value: 'CITYVILLE ELECTRIC', confidence: 96.9 }
      },
      suggestions: {
        title: 'Electric Bill - Sarah Williams',
        category: 'bills',
        description: 'Cityville Electric utility bill for August 2024, amount due $127.45'
      }
    }
  };

  const result = mockData[docType] || {
    api_used: 'DetectDocumentText',
    confidence: 'low',
    fields: {},
    error: 'Document type not supported for structured extraction',
    suggestions: {
      title: file.name.replace(/\.[^/.]+$/, ''),
      category: 'general',
      description: 'Document uploaded for processing'
    }
  };

  setExtractedData(result);
  setIsAnalyzing(false);
}, [documentTypes]);


If your backend endpoint is /api/inbox/analyze with JSON (i.e., you’ve already uploaded & have an s3Key), swap the fetch body to:

const res = await fetch('/api/inbox/analyze', {
  method: 'POST',
  headers: { 'content-type': 'application/json' },
  body: JSON.stringify({ s3Key: '<your-key-here>', documentType: docType })
});


and keep the fieldsArrayToMap step.

3) (Optional) Mask any SSN-like text when copying

Add this safer copier so you don’t leak full SSNs if your backend ever returns unmasked data:

const copyFieldValue = (value) => {
  const masked = String(value).replace(/\b(\d{3})[-\s]?(\d{2})[-\s]?(\d{4})\b/g, 'XXX-XX-$3');
  navigator.clipboard.writeText(masked);
};

4) Update the “API used” pill to match routing

Where you render:

<Badge variant="outline">{extractedData.api_used}</Badge>


That’s fine. It’ll show AnalyzeID for DL, AnalyzeDocument (Queries) for SSN/Insurance/Other.

5) What to expect after these changes

Driver’s License / Passport → AnalyzeID fields (name, idNumber, dob, expiration, address, etc.)

SSN Card → AnalyzeDocument (Queries) with FULL_NAME, SSN_MASKED, ISSUER

Insurance Card → AnalyzeDocument (Queries) with MEMBER_ID, GROUP_NUMBER, ISSUER, optional RXBIN/RXPCN

Utility Bill / Other → AnalyzeDocument (Queries) with issuer, dates, account/invoice, amount, etc.