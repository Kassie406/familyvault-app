Luxury Cards (gold/black) – Reusable Components For Dashboard
· typescript
import React, { useMemo, useState } from "react";


        {/* Add another member */}
        <div className="mt-3">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="text-[#D4AF37] hover:text-white hover:bg-[#D4AF37]/10">+ Add another member</Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="bg-black text-white border border-[#232530] min-w-[260px]">
              {DIRECTORY.map((p) => (
                <DropdownMenuItem key={p.id} className="hover:bg-white/10" onClick={() => addShare(p.id)}>
                  <div>
                    <div className="text-sm">{p.name}</div>
                    <div className="text-[11px] text-neutral-400">{p.email || p.phone || (p.type === 'group' ? 'Group' : 'Member')}</div>
                  </div>
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>


      <Separator className="bg-[#232530] mb-6" />


      {/* Send Directly */}
      <div className="mb-6">
        <p className="text-sm mb-2">Send Link Directly</p>
        <div className="flex flex-wrap items-center gap-2">
          <Select value={sendMode} onValueChange={(v: any) => setSendMode(v)}>
            <SelectTrigger className="w-[120px] bg-black text-white border-[#232530]"><SelectValue placeholder="Email" /></SelectTrigger>
            <SelectContent className="bg-black text-white border-[#232530]">
              <SelectItem value="email" className="hover:bg-white/10">Email</SelectItem>
              <SelectItem value="sms" className="hover:bg:white/10">SMS</SelectItem>
            </SelectContent>
          </Select>
          <Input
            placeholder={sendMode === 'email' ? 'name@example.com' : '+1 (555) 555‑5555'}
            value={recipientInput}
            onChange={(e) => setRecipientInput(e.target.value)}
            className="bg-black text-white border-[#232530]"
          />
          <Button className="bg-[#D4AF37] text-black" onClick={addRecipient}>Add</Button>
        </div>
        {recipients.length > 0 && (
          <div className="mt-2 flex flex-wrap gap-2">
            {recipients.map((r, i) => (
              <span key={i} className="inline-flex items-center gap-1 rounded-full bg-[#111] border border-[#232530] px-2 py-1 text-xs">
                {r}
                <button onClick={() => removeRecipient(i)} className="text-neutral-400 hover:text-white">✕</button>
              </span>
            ))}
          </div>
        )}
        <div className="mt-2">
          <Button variant="outline" className="border-[#232530] text-white" onClick={sendNotifications}>
            Send {sendMode.toUpperCase()}
          </Button>
        </div>
      </div>


      {/* Audit */}
      <div className="mb-4">
        <p className="text-sm mb-2">Audit</p>
        {audit.length === 0 ? (
          <div className="text-xs text-neutral-500">No recent actions</div>
        ) : (
          <ul className="space-y-1 text-xs text-neutral-300">
            {audit.map((a, i) => (
              <li key={i}>• {a.event} — {new Date(a.ts).toLocaleString()}</li>
            ))}
          </ul>
        )}
      </div>


      {/* Actions */}
      <div className="flex justify-end gap-3">
        <Button className="bg-[#D4AF37] text-black" onClick={saveSharing}>Update Sharing</Button>
        <Button variant="ghost">Cancel</Button>
      </div>
    </div>
  );
}



All set. I upgraded the Share panel with the security features we discussed:

What I added

Expiry selector for the shareable link (24h, 7d, 30d, Never).

Require login toggle (even if someone has the link).

Guardrail: you can’t send Email/SMS while the link is disabled (with a friendly toast).

Inline audit list that logs actions (enable/disable link, regenerate, permission changes, recipients added/removed, sends, saves).

Kept solid black menus + white text across all dropdowns and menus.

API payloads now include

expiry and requireLogin in both save and send calls:

PUT /api/credentials/:id/shares
{
  "linkEnabled": true,
  "shareUrl": "https://familycircle.app/share/abc123",
  "expiry": "7d",
  "requireLogin": true,
  "shares": [{ "personId": "p-kas", "permission": "view" }]
}

POST /api/notify/email  // (or /api/notify/sms)
{
  "credentialId": "c-ph-angel",
  "recipients": ["name@example.com"],
  "url": "https://familycircle.app/share/abc123",
  "mode": "email",
  "expiry": "7d",
  "requireLogin": true
}