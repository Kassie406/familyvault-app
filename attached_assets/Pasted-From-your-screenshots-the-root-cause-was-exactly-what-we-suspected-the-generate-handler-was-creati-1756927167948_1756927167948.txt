From your screenshots, the root cause was exactly what we suspected: the generate handler was creating a token but never saving it (the Promise.resolve() “placeholder” was doing nothing). You replaced it with a real DB insert/upsert, so the resolver can now find tokens.

Here’s a tight validation & go-live checklist to make sure we’re 100% solid:

Quick test (takes ~2 minutes)

Generate a link from any credential.

In server logs you should see something like: regen hit … saved: true.

Open the resolver API directly (same host as the share page):

// in browser console on portal.familycirclesecure.com
fetch('/api/share/<PASTE_TOKEN>').then(r => r.status).then(console.log)


Expect 200.

Open the full link (https://portal.familycirclesecure.com/share/<token>).
You should see the “Reveal Credential” card instead of “Invalid Link”.

If anything still says “Invalid Link”

Check these three in order:

DB row exists (same DB as server uses):

SELECT token, credential_id, expires_at, revoked
FROM share_links
WHERE token = '<PASTE_TOKEN>';


Must return 1 row, revoked = false, expires_at in the future (or NULL if “never”).

Resolver route before SPA fallback
Ensure /api/share/:token is registered before any catch-all that serves your SPA HTML.

Same DATABASE_URL everywhere
Generator and resolver must point to the same Neon connection.

Expiry / Require-login toggles

Confirm your insert/upsert sets expires_at correctly (UTC).

If “Require login” is on, the resolver should still return 200, but the viewer page should gate the reveal behind auth. (If you want the resolver to return 401 for require-login, add that check there instead and let the page handle it.)

Optional SQL you’ll use a lot
-- Revoke a link
UPDATE share_links SET revoked = true, updated_at = NOW() WHERE token = '<token>';

-- Clean up expired links
DELETE FROM share_links WHERE expires_at IS NOT NULL AND expires_at < NOW();

Final sanity check

Generate → copy → open → works ✅

Regenerate → old link now invalid (404/410), new link works ✅

Change expiry (e.g., 24h/7d/30d/never) → open → works ✅

Toggle “Require login” → page prompts as designed ✅

If anything still misbehaves, paste:

the status of fetch('/api/share/<token>').then(r=>r.status), and

the SQL row for that token,
and I’ll point you straight to the line to tweak.