let‚Äôs switch to a two-level flow:

Passwords (Managers List)

Cards: ‚ÄúAngel‚Äôs Password Manager‚Äù, ‚ÄúKassandra‚Äôs Password Manager‚Äù.

Clicking a card navigates to /family/passwords/manager/:managerId.

Manager Detail

Full page dedicated to that manager only.

Sections inside (Home, Devices, Entertainment, Personal, Other) with their own cards + ‚ÄúAdd‚Äù pre-scoped to the manager.

Breadcrumb back to Passwords.

Below is a tight implementation you can drop in (Vite + React Router style). If you‚Äôre using Next/other, the component structure is the same‚Äîswap the router bits.

1) Routes
// src/app-routes.tsx
import { createBrowserRouter } from "react-router-dom";
import PasswordsManagersPage from "@/pages/family/passwords/ManagersList";
import ManagerDetailPage from "@/pages/family/passwords/ManagerDetail";

export const router = createBrowserRouter([
  { path: "/family/passwords", element: <PasswordsManagersPage /> },
  { path: "/family/passwords/manager/:managerId", element: <ManagerDetailPage /> },
]);

2) Managers List (just two cards)
// src/pages/family/passwords/ManagersList.tsx
import { useNavigate } from "react-router-dom";
import { cn } from "@/lib/utils";

type Manager = { id: "angel" | "kassandra"; name: string; prepopulatedCount: number };

const MANAGERS: Manager[] = [
  { id: "angel", name: "Angel‚Äôs Password Manager", prepopulatedCount: 5 },
  { id: "kassandra", name: "Kassandra‚Äôs Password Manager", prepopulatedCount: 4 },
];

function CardShell({ children, className = "" }: React.PropsWithChildren<{ className?: string }>) {
  return (
    <div
      className={cn(
        "rounded-2xl border border-[#232530] bg-gradient-to-b from-[#161616] to-[#0F0F0F]",
        "shadow-[0_10px_28px_rgba(0,0,0,0.45)] hover:border-[#D4AF37]/70"
      , className)}
    >
      {children}
    </div>
  );
}

export default function PasswordsManagersPage() {
  const navigate = useNavigate();

  return (
    <div className="max-w-7xl mx-auto px-6 py-8 space-y-6">
      <header className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-semibold text-white">Passwords</h1>
          <p className="text-sm text-neutral-400">Select a manager to view their vault.</p>
        </div>
      </header>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {MANAGERS.map(m => (
          <button
            key={m.id}
            onClick={() => navigate(`/family/passwords/manager/${m.id}`)}
            className="text-left"
          >
            <CardShell className="p-5 hover:-translate-y-0.5 transition">
              <div className="flex items-center gap-3">
                <div className="h-10 w-10 grid place-items-center rounded-xl bg-[#D4AF37]/15 text-[#D4AF37] border border-[#232530]">
                  üîê
                </div>
                <div>
                  <div className="text-white font-medium">{m.name}</div>
                  <div className="text-xs text-neutral-400">+ {m.prepopulatedCount} items pre-populated</div>
                </div>
              </div>
            </CardShell>
          </button>
        ))}
      </div>
    </div>
  );
}

3) Manager Detail Page (the dedicated page you wanted)
// src/pages/family/passwords/ManagerDetail.tsx
import { useParams, Link } from "react-router-dom";
import { useMemo } from "react";
import { Home, Smartphone, Tv, LockKeyhole, Plus } from "lucide-react";
import { cn } from "@/lib/utils";

// --- Types / mock data; wire to your API/store ---
type ManagerId = "angel" | "kassandra";
type SectionKey = "home" | "devices" | "entertainment" | "personal" | "other";

type Credential = {
  id: string;
  title: string;
  owner: ManagerId;
  section: SectionKey;
  meta?: { ownerLabel?: string; typeLabel?: string };
};

const SECTION_META: Record<SectionKey, { label: string; sub: string; icon: React.ReactNode }> = {
  home:          { label: "Home",                     sub: "WiFi, codes, home access",            icon: <Home className="h-4 w-4" /> },
  devices:       { label: "Devices & Electronics",    sub: "Phones, laptops, smart devices",       icon: <Smartphone className="h-4 w-4" /> },
  entertainment: { label: "Entertainment & Subs",     sub: "Streaming, music, media",              icon: <Tv className="h-4 w-4" /> },
  personal:      { label: "Personal Accounts",        sub: "Banking, email, personal services",    icon: <LockKeyhole className="h-4 w-4" /> },
  other:         { label: "Other",                    sub: "Uncategorized credentials",            icon: <span className="text-neutral-300">üìÅ</span> },
};

// Replace with real fetch
const ALL_CREDS: Credential[] = [
  { id: "c1", title: "Home Wi-Fi", owner: "angel", section: "home", meta: { ownerLabel: "Angel", typeLabel: "Network"} },
  { id: "c2", title: "Garage Door Code", owner: "angel", section: "home", meta: { ownerLabel: "Home", typeLabel: "Access"} },
  { id: "c3", title: "Angel‚Äôs Phone Password", owner: "angel", section: "devices", meta: { ownerLabel: "Angel", typeLabel: "Device"} },
  { id: "c4", title: "Angel‚Äôs Bank Account", owner: "angel", section: "personal", meta: { ownerLabel: "Angel", typeLabel: "Finance"} },
  { id: "k1", title: "Safe Code", owner: "kassandra", section: "home", meta: { ownerLabel: "Kassandra", typeLabel: "Access"} },
  { id: "k2", title: "Kassandra‚Äôs Phone Password", owner: "kassandra", section: "devices", meta: { ownerLabel: "Kassandra", typeLabel: "Device"} },
  { id: "k3", title: "Netflix", owner: "kassandra", section: "entertainment", meta: { ownerLabel: "Home", typeLabel: "Entertainment"} },
  { id: "k4", title: "Spotify Family", owner: "kassandra", section: "entertainment", meta: { ownerLabel: "Kassandra", typeLabel: "Entertainment"} },
];

const MANAGER_NAME: Record<ManagerId,string> = {
  angel: "Angel‚Äôs Password Manager",
  kassandra: "Kassandra‚Äôs Password Manager",
};

// --- UI shells reused ---
function CardShell({ children, className = "" }: React.PropsWithChildren<{ className?: string }>) {
  return (
    <div
      className={cn(
        "rounded-2xl border border-[#232530] bg-gradient-to-b from-[#161616] to-[#0F0F0F]",
        "shadow-[0_10px_28px_rgba(0,0,0,0.45)]", className
      )}
    >
      {children}
    </div>
  );
}

function SectionHeader({ icon, title, sub, onAdd }:{
  icon: React.ReactNode; title: string; sub: string; onAdd: () => void;
}) {
  return (
    <div className="flex items-start justify-between mb-3">
      <div className="flex items-center gap-2">
        <div className="h-8 w-8 grid place-items-center rounded-lg bg-[#111214] border border-[#232530] text-neutral-300">
          {icon}
        </div>
        <div>
          <div className="text-[15px] text-white font-medium">{title}</div>
          <div className="text-xs text-neutral-500">{sub}</div>
        </div>
      </div>
      <button onClick={onAdd} className="flex items-center gap-2 text-sm text-[#D4AF37] hover:underline">
        <Plus className="h-4 w-4" /> Add
      </button>
    </div>
  );
}

function CredentialCard({ cred }: { cred: Credential }) {
  return (
    <CardShell className="p-4">
      <div className="flex items-start gap-3">
        <div className="h-9 w-9 rounded-lg grid place-items-center bg-[#111214] border border-[#232530] text-neutral-300">üîë</div>
        <div className="min-w-0 flex-1">
          <div className="text-sm text-white font-medium truncate">{cred.title}</div>
          <div className="text-xs text-neutral-500 mt-0.5">
            {cred.meta?.ownerLabel && <>Owner: <span className="text-neutral-300">{cred.meta.ownerLabel}</span></>}
            {cred.meta?.typeLabel && <><span className="text-neutral-600"> ‚Ä¢ </span><span className="text-neutral-400">{cred.meta.typeLabel}</span></>}
          </div>
          <div className="mt-2 flex items-center gap-3 text-xs">
            <button className="text-[#D4AF37] hover:underline">Reveal</button>
            <span className="text-neutral-600">‚Ä¢</span>
            <button className="text-neutral-300 hover:text-white">Copy</button>
          </div>
        </div>
        <button className="h-8 w-8 grid place-items-center rounded-lg text-neutral-400 hover:text-white">‚ãØ</button>
      </div>
    </CardShell>
  );
}

export default function ManagerDetailPage() {
  const { managerId } = useParams<{ managerId: ManagerId }>();
  const managerName = MANAGER_NAME[(managerId ?? "angel") as ManagerId];

  // Replace with real filtered data from your store/API
  const creds = useMemo(
    () => ALL_CREDS.filter(c => c.owner === managerId),
    [managerId]
  );

  const grouped: Record<SectionKey, Credential[]> = useMemo(() => {
    const g: Record<SectionKey, Credential[]> = { home:[], devices:[], entertainment:[], personal:[], other:[] };
    creds.forEach(c => g[c.section]?.push(c));
    return g;
  }, [creds]);

  const openAddModal = (section: SectionKey) => {
    // launch your existing Add modal prefilled:
    // openAdd({ owner: managerId as ManagerId, section });
    console.log("Add", section, "for", managerId);
  };

  return (
    <div className="max-w-7xl mx-auto px-6 py-8 space-y-8">
      {/* Breadcrumb */}
      <div className="text-sm text-neutral-400">
        <Link to="/family/passwords" className="hover:underline">Passwords</Link>
        <span className="text-neutral-600"> / </span>
        <span className="text-white">{managerName}</span>
      </div>

      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-white">{managerName}</h1>
        {/* Optional: manager actions */}
      </div>

      {/* Sections */}
      { (Object.keys(SECTION_META) as SectionKey[]).map((key) => {
        const meta = SECTION_META[key];
        const items = grouped[key];
        return (
          <CardShell key={key} className="p-5">
            <SectionHeader icon={meta.icon} title={meta.label} sub={meta.sub} onAdd={() => openAddModal(key)} />
            {items.length === 0 ? (
              <div className="text-xs text-neutral-500 pl-1">No items yet.</div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {items.map(c => <CredentialCard key={c.id} cred={c} />)}
              </div>
            )}
          </CardShell>
        );
      })}
    </div>
  );
}

What changes for users

Passwords page becomes a clean hub with just the two manager cards.

Clicking a card opens a dedicated page for that manager with all their sections and credentials.

Your Add buttons on the detail page pre-scope owner + section.

What to wire on your side

Replace mock arrays with your API/store.

Ensure credentials include { owner, section }.

In your Add/Edit modal, accept default values from context (owner, section).

Keep your existing reveal/copy/share flows‚Äîthey work the same; they just run from the detail page now.